// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gossip/gossip.proto

package gossip

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	services "github.com/quorumcontrol/messages/v2/build/go/services"
	signatures "github.com/quorumcontrol/messages/v2/build/go/signatures"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Checkpoint struct {
	Height           uint64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	AddBlockRequests [][]byte `protobuf:"bytes,2,rep,name=add_block_requests,json=addBlockRequests,proto3" json:"add_block_requests,omitempty"`
}

func (m *Checkpoint) Reset()         { *m = Checkpoint{} }
func (m *Checkpoint) String() string { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()    {}
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8c862cd799681d0, []int{0}
}
func (m *Checkpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Checkpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Checkpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Checkpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Checkpoint.Merge(m, src)
}
func (m *Checkpoint) XXX_Size() int {
	return m.Size()
}
func (m *Checkpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Checkpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Checkpoint proto.InternalMessageInfo

func (m *Checkpoint) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Checkpoint) GetAddBlockRequests() [][]byte {
	if m != nil {
		return m.AddBlockRequests
	}
	return nil
}

type Round struct {
	Height        uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	CheckpointCid []byte `protobuf:"bytes,2,opt,name=checkpoint_cid,json=checkpointCid,proto3" json:"checkpoint_cid,omitempty"`
	StateCid      []byte `protobuf:"bytes,3,opt,name=state_cid,json=stateCid,proto3" json:"state_cid,omitempty"`
}

func (m *Round) Reset()         { *m = Round{} }
func (m *Round) String() string { return proto.CompactTextString(m) }
func (*Round) ProtoMessage()    {}
func (*Round) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8c862cd799681d0, []int{1}
}
func (m *Round) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Round) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Round.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Round) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Round.Merge(m, src)
}
func (m *Round) XXX_Size() int {
	return m.Size()
}
func (m *Round) XXX_DiscardUnknown() {
	xxx_messageInfo_Round.DiscardUnknown(m)
}

var xxx_messageInfo_Round proto.InternalMessageInfo

func (m *Round) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Round) GetCheckpointCid() []byte {
	if m != nil {
		return m.CheckpointCid
	}
	return nil
}

func (m *Round) GetStateCid() []byte {
	if m != nil {
		return m.StateCid
	}
	return nil
}

type RoundConfirmation struct {
	Height    uint64                `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	RoundCid  []byte                `protobuf:"bytes,2,opt,name=round_cid,json=roundCid,proto3" json:"round_cid,omitempty"`
	Signature *signatures.Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RoundConfirmation) Reset()         { *m = RoundConfirmation{} }
func (m *RoundConfirmation) String() string { return proto.CompactTextString(m) }
func (*RoundConfirmation) ProtoMessage()    {}
func (*RoundConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8c862cd799681d0, []int{2}
}
func (m *RoundConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoundConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoundConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoundConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundConfirmation.Merge(m, src)
}
func (m *RoundConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *RoundConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_RoundConfirmation proto.InternalMessageInfo

func (m *RoundConfirmation) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *RoundConfirmation) GetRoundCid() []byte {
	if m != nil {
		return m.RoundCid
	}
	return nil
}

func (m *RoundConfirmation) GetSignature() *signatures.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Proof struct {
	ObjectId          []byte                    `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Tip               []byte                    `protobuf:"bytes,2,opt,name=tip,proto3" json:"tip,omitempty"`
	AddBlockRequest   *services.AddBlockRequest `protobuf:"bytes,3,opt,name=add_block_request,json=addBlockRequest,proto3" json:"add_block_request,omitempty"`
	Checkpoint        *Checkpoint               `protobuf:"bytes,4,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Round             *Round                    `protobuf:"bytes,5,opt,name=round,proto3" json:"round,omitempty"`
	RoundConfirmation *RoundConfirmation        `protobuf:"bytes,6,opt,name=round_confirmation,json=roundConfirmation,proto3" json:"round_confirmation,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8c862cd799681d0, []int{3}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetObjectId() []byte {
	if m != nil {
		return m.ObjectId
	}
	return nil
}

func (m *Proof) GetTip() []byte {
	if m != nil {
		return m.Tip
	}
	return nil
}

func (m *Proof) GetAddBlockRequest() *services.AddBlockRequest {
	if m != nil {
		return m.AddBlockRequest
	}
	return nil
}

func (m *Proof) GetCheckpoint() *Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *Proof) GetRound() *Round {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *Proof) GetRoundConfirmation() *RoundConfirmation {
	if m != nil {
		return m.RoundConfirmation
	}
	return nil
}

func init() {
	proto.RegisterType((*Checkpoint)(nil), "gossip.Checkpoint")
	proto.RegisterType((*Round)(nil), "gossip.Round")
	proto.RegisterType((*RoundConfirmation)(nil), "gossip.RoundConfirmation")
	proto.RegisterType((*Proof)(nil), "gossip.Proof")
}

func init() { proto.RegisterFile("gossip/gossip.proto", fileDescriptor_c8c862cd799681d0) }

var fileDescriptor_c8c862cd799681d0 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0xa4, 0x89, 0x92, 0x21, 0x85, 0x66, 0x91, 0xa8, 0x69, 0x24, 0x2b, 0x0a, 0x42,
	0xca, 0x01, 0xc5, 0x52, 0x80, 0x07, 0xa0, 0x39, 0x00, 0x17, 0x84, 0x96, 0x1b, 0x97, 0xc8, 0xde,
	0xdd, 0xda, 0x4b, 0x63, 0x8f, 0xbb, 0xbb, 0xce, 0x95, 0x57, 0xe0, 0x19, 0x78, 0x1a, 0x8e, 0x3d,
	0x72, 0x44, 0xc9, 0x8b, 0x20, 0xaf, 0xed, 0xd8, 0x6d, 0xd5, 0x93, 0x67, 0xff, 0xf9, 0x77, 0x7e,
	0xf9, 0xdb, 0x81, 0xe7, 0x11, 0x6a, 0x2d, 0x33, 0xbf, 0xfc, 0x2c, 0x33, 0x85, 0x06, 0xc9, 0xa0,
	0x3c, 0x5d, 0x9c, 0x6b, 0xa1, 0x76, 0x92, 0x09, 0xed, 0xd7, 0x45, 0x69, 0xb8, 0x98, 0x6a, 0x19,
	0xa5, 0x81, 0xc9, 0x55, 0xd1, 0x3a, 0x96, 0x65, 0x73, 0x4e, 0x01, 0xd6, 0xb1, 0x60, 0xd7, 0x19,
	0xca, 0xd4, 0x90, 0x17, 0x30, 0x88, 0x85, 0x8c, 0x62, 0xe3, 0x3a, 0x33, 0x67, 0x71, 0x42, 0xab,
	0x13, 0x79, 0x03, 0x24, 0xe0, 0x7c, 0x13, 0x6e, 0x91, 0x5d, 0x6f, 0x94, 0xb8, 0xc9, 0x85, 0x36,
	0xda, 0xed, 0xce, 0x7a, 0x8b, 0x31, 0x3d, 0x0b, 0x38, 0xbf, 0x2c, 0x1a, 0xb4, 0xd2, 0xe7, 0x0c,
	0xfa, 0x14, 0xf3, 0x94, 0x3f, 0x3a, 0xee, 0x35, 0x3c, 0x65, 0xc7, 0xd0, 0x0d, 0x93, 0xdc, 0xed,
	0xce, 0x9c, 0xc5, 0x98, 0x9e, 0x36, 0xea, 0x5a, 0x72, 0x32, 0x85, 0x91, 0x36, 0x81, 0x11, 0xd6,
	0xd1, 0xb3, 0x8e, 0xa1, 0x15, 0xd6, 0x92, 0xcf, 0x7f, 0xc2, 0xc4, 0x86, 0xac, 0x31, 0xbd, 0x92,
	0x2a, 0x09, 0x8c, 0xc4, 0xf4, 0xd1, 0xc0, 0x29, 0x8c, 0x54, 0x61, 0x6e, 0x65, 0x0d, 0xad, 0x50,
	0xc4, 0xbc, 0x87, 0xd1, 0x11, 0x8b, 0x8d, 0x79, 0xb2, 0x3a, 0x5f, 0xee, 0x56, 0x2d, 0x54, 0xdf,
	0xea, 0x92, 0x36, 0xce, 0xf9, 0xef, 0x2e, 0xf4, 0xbf, 0x2a, 0xc4, 0xab, 0x62, 0x3a, 0x86, 0x3f,
	0x04, 0x33, 0x1b, 0xc9, 0x6d, 0xf0, 0x98, 0x0e, 0x4b, 0xe1, 0x33, 0x27, 0x67, 0xd0, 0x33, 0x32,
	0xab, 0x42, 0x8b, 0x92, 0x7c, 0x84, 0xc9, 0x03, 0x98, 0x55, 0xee, 0xb4, 0xc8, 0xad, 0x5f, 0xef,
	0xc3, 0x5d, 0xae, 0xf4, 0xd9, 0x3d, 0xd0, 0x64, 0x05, 0xd0, 0x00, 0x73, 0x4f, 0xec, 0x04, 0xb2,
	0xac, 0x96, 0xa3, 0x79, 0x55, 0xda, 0x72, 0x91, 0x57, 0xd0, 0xb7, 0x3f, 0xee, 0xf6, 0xad, 0xfd,
	0xb4, 0xb6, 0x5b, 0x96, 0xb4, 0xec, 0x91, 0x4f, 0x40, 0x2a, 0x5c, 0x2d, 0xb8, 0xee, 0xc0, 0xde,
	0x78, 0x79, 0xe7, 0x46, 0x9b, 0x3e, 0x9d, 0xa8, 0xfb, 0xd2, 0xe5, 0x97, 0x3f, 0x7b, 0xcf, 0xb9,
	0xdd, 0x7b, 0xce, 0xbf, 0xbd, 0xe7, 0xfc, 0x3a, 0x78, 0x9d, 0xdb, 0x83, 0xd7, 0xf9, 0x7b, 0xf0,
	0x3a, 0xdf, 0xdf, 0x45, 0xd2, 0xc4, 0x79, 0xb8, 0x64, 0x98, 0xf8, 0x37, 0x39, 0xaa, 0x3c, 0x61,
	0x98, 0x1a, 0x85, 0x5b, 0x3f, 0x11, 0x5a, 0x07, 0x91, 0xd0, 0xfe, 0x6e, 0xe5, 0x87, 0xb9, 0xdc,
	0x72, 0x3f, 0xc2, 0x6a, 0xe5, 0xc3, 0x81, 0xdd, 0xda, 0xb7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x69, 0xcc, 0x3a, 0xac, 0x0a, 0x03, 0x00, 0x00,
}

func (m *Checkpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Checkpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Checkpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddBlockRequests) > 0 {
		for iNdEx := len(m.AddBlockRequests) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddBlockRequests[iNdEx])
			copy(dAtA[i:], m.AddBlockRequests[iNdEx])
			i = encodeVarintGossip(dAtA, i, uint64(len(m.AddBlockRequests[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintGossip(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Round) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Round) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Round) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateCid) > 0 {
		i -= len(m.StateCid)
		copy(dAtA[i:], m.StateCid)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.StateCid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CheckpointCid) > 0 {
		i -= len(m.CheckpointCid)
		copy(dAtA[i:], m.CheckpointCid)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.CheckpointCid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintGossip(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoundConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoundConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RoundCid) > 0 {
		i -= len(m.RoundCid)
		copy(dAtA[i:], m.RoundCid)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.RoundCid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintGossip(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundConfirmation != nil {
		{
			size, err := m.RoundConfirmation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Round != nil {
		{
			size, err := m.Round.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Checkpoint != nil {
		{
			size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AddBlockRequest != nil {
		{
			size, err := m.AddBlockRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tip) > 0 {
		i -= len(m.Tip)
		copy(dAtA[i:], m.Tip)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.Tip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjectId) > 0 {
		i -= len(m.ObjectId)
		copy(dAtA[i:], m.ObjectId)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.ObjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGossip(dAtA []byte, offset int, v uint64) int {
	offset -= sovGossip(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Checkpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovGossip(uint64(m.Height))
	}
	if len(m.AddBlockRequests) > 0 {
		for _, b := range m.AddBlockRequests {
			l = len(b)
			n += 1 + l + sovGossip(uint64(l))
		}
	}
	return n
}

func (m *Round) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovGossip(uint64(m.Height))
	}
	l = len(m.CheckpointCid)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	l = len(m.StateCid)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}

func (m *RoundConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovGossip(uint64(m.Height))
	}
	l = len(m.RoundCid)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	l = len(m.Tip)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	if m.AddBlockRequest != nil {
		l = m.AddBlockRequest.Size()
		n += 1 + l + sovGossip(uint64(l))
	}
	if m.Checkpoint != nil {
		l = m.Checkpoint.Size()
		n += 1 + l + sovGossip(uint64(l))
	}
	if m.Round != nil {
		l = m.Round.Size()
		n += 1 + l + sovGossip(uint64(l))
	}
	if m.RoundConfirmation != nil {
		l = m.RoundConfirmation.Size()
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}

func sovGossip(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGossip(x uint64) (n int) {
	return sovGossip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Checkpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Checkpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Checkpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddBlockRequests", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddBlockRequests = append(m.AddBlockRequests, make([]byte, postIndex-iNdEx))
			copy(m.AddBlockRequests[len(m.AddBlockRequests)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Round) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Round: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Round: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointCid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckpointCid = append(m.CheckpointCid[:0], dAtA[iNdEx:postIndex]...)
			if m.CheckpointCid == nil {
				m.CheckpointCid = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateCid = append(m.StateCid[:0], dAtA[iNdEx:postIndex]...)
			if m.StateCid == nil {
				m.StateCid = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundCid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundCid = append(m.RoundCid[:0], dAtA[iNdEx:postIndex]...)
			if m.RoundCid == nil {
				m.RoundCid = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &signatures.Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = append(m.ObjectId[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjectId == nil {
				m.ObjectId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tip = append(m.Tip[:0], dAtA[iNdEx:postIndex]...)
			if m.Tip == nil {
				m.Tip = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddBlockRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddBlockRequest == nil {
				m.AddBlockRequest = &services.AddBlockRequest{}
			}
			if err := m.AddBlockRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoint == nil {
				m.Checkpoint = &Checkpoint{}
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Round == nil {
				m.Round = &Round{}
			}
			if err := m.Round.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundConfirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoundConfirmation == nil {
				m.RoundConfirmation = &RoundConfirmation{}
			}
			if err := m.RoundConfirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGossip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGossip
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGossip
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGossip
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGossip        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGossip          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGossip = fmt.Errorf("proto: unexpected end of group")
)
