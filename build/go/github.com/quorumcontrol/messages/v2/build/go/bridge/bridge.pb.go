// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/bridge.proto

/*
	Package bridge is a generated protocol buffer package.

	It is generated from these files:
		bridge/bridge.proto

	It has these top-level messages:
		ActorPID
		WireDelivery
*/
package bridge

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ActorPID struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ActorPID) Reset()                    { *m = ActorPID{} }
func (m *ActorPID) String() string            { return proto.CompactTextString(m) }
func (*ActorPID) ProtoMessage()               {}
func (*ActorPID) Descriptor() ([]byte, []int) { return fileDescriptorBridge, []int{0} }

func (m *ActorPID) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ActorPID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type WireDelivery struct {
	Header   map[string]string    `protobuf:"bytes,1,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Message  *google_protobuf.Any `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Target   *ActorPID            `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Sender   *ActorPID            `protobuf:"bytes,4,opt,name=sender" json:"sender,omitempty"`
	Outgoing bool                 `protobuf:"varint,5,opt,name=outgoing,proto3" json:"outgoing,omitempty"`
	Tracing  map[string]string    `protobuf:"bytes,6,rep,name=tracing" json:"tracing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *WireDelivery) Reset()                    { *m = WireDelivery{} }
func (m *WireDelivery) String() string            { return proto.CompactTextString(m) }
func (*WireDelivery) ProtoMessage()               {}
func (*WireDelivery) Descriptor() ([]byte, []int) { return fileDescriptorBridge, []int{1} }

func (m *WireDelivery) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *WireDelivery) GetMessage() *google_protobuf.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *WireDelivery) GetTarget() *ActorPID {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *WireDelivery) GetSender() *ActorPID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *WireDelivery) GetOutgoing() bool {
	if m != nil {
		return m.Outgoing
	}
	return false
}

func (m *WireDelivery) GetTracing() map[string]string {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func init() {
	proto.RegisterType((*ActorPID)(nil), "bridge.ActorPID")
	proto.RegisterType((*WireDelivery)(nil), "bridge.WireDelivery")
}
func (m *ActorPID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActorPID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *WireDelivery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WireDelivery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Header) > 0 {
		for k, _ := range m.Header {
			dAtA[i] = 0xa
			i++
			v := m.Header[k]
			mapSize := 1 + len(k) + sovBridge(uint64(len(k))) + 1 + len(v) + sovBridge(uint64(len(v)))
			i = encodeVarintBridge(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBridge(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintBridge(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBridge(dAtA, i, uint64(m.Message.Size()))
		n1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Target != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBridge(dAtA, i, uint64(m.Target.Size()))
		n2, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Sender != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBridge(dAtA, i, uint64(m.Sender.Size()))
		n3, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Outgoing {
		dAtA[i] = 0x28
		i++
		if m.Outgoing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Tracing) > 0 {
		for k, _ := range m.Tracing {
			dAtA[i] = 0x32
			i++
			v := m.Tracing[k]
			mapSize := 1 + len(k) + sovBridge(uint64(len(k))) + 1 + len(v) + sovBridge(uint64(len(v)))
			i = encodeVarintBridge(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBridge(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintBridge(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintBridge(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ActorPID) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *WireDelivery) Size() (n int) {
	var l int
	_ = l
	if len(m.Header) > 0 {
		for k, v := range m.Header {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBridge(uint64(len(k))) + 1 + len(v) + sovBridge(uint64(len(v)))
			n += mapEntrySize + 1 + sovBridge(uint64(mapEntrySize))
		}
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.Outgoing {
		n += 2
	}
	if len(m.Tracing) > 0 {
		for k, v := range m.Tracing {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBridge(uint64(len(k))) + 1 + len(v) + sovBridge(uint64(len(v)))
			n += mapEntrySize + 1 + sovBridge(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBridge(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBridge(x uint64) (n int) {
	return sovBridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActorPID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActorPID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActorPID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WireDelivery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WireDelivery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WireDelivery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBridge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBridge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBridge
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBridge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBridge
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBridge(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBridge
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Header[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &google_protobuf.Any{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &ActorPID{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &ActorPID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outgoing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Outgoing = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracing == nil {
				m.Tracing = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBridge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBridge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBridge
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBridge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBridge
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBridge(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBridge
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tracing[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBridge
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBridge
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBridge(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBridge = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBridge   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bridge/bridge.proto", fileDescriptorBridge) }

var fileDescriptorBridge = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3f, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0x71, 0x42, 0xd3, 0xe2, 0x56, 0xa8, 0x32, 0x1d, 0x42, 0x86, 0x28, 0x74, 0xca, 0x64,
	0x4b, 0xa5, 0x43, 0x29, 0x53, 0x51, 0x41, 0xb0, 0xa1, 0x08, 0x09, 0x89, 0x2d, 0x7f, 0x8c, 0x6b,
	0x91, 0xc6, 0xe0, 0x38, 0x95, 0x72, 0x0b, 0x0e, 0xc0, 0x81, 0x18, 0x39, 0x02, 0x2a, 0x17, 0x41,
	0x89, 0x13, 0xd4, 0x01, 0x06, 0xa6, 0xe4, 0xf3, 0xfb, 0xbd, 0x97, 0xef, 0x7b, 0x31, 0x3c, 0x8a,
	0x24, 0x4f, 0x18, 0x25, 0xfa, 0x81, 0x9f, 0xa5, 0x50, 0x02, 0x59, 0x5a, 0x39, 0xc7, 0x4c, 0x08,
	0x96, 0x52, 0x52, 0x9f, 0x46, 0xc5, 0x23, 0x09, 0xb3, 0x52, 0x23, 0xe3, 0x29, 0xec, 0x2d, 0x62,
	0x25, 0xe4, 0xed, 0xcd, 0x12, 0xd9, 0xb0, 0x1b, 0x26, 0x89, 0xa4, 0x79, 0x6e, 0x03, 0x0f, 0xf8,
	0x07, 0x41, 0x2b, 0xd1, 0x21, 0x34, 0x78, 0x62, 0x1b, 0xf5, 0xa1, 0xc1, 0x93, 0xf1, 0x9b, 0x09,
	0x07, 0xf7, 0x5c, 0xd2, 0x25, 0x4d, 0xf9, 0x86, 0xca, 0x12, 0xcd, 0xa0, 0xb5, 0xa2, 0x61, 0x42,
	0xa5, 0x0d, 0x3c, 0xd3, 0xef, 0x4f, 0x3c, 0xdc, 0x18, 0xd9, 0xa5, 0xf0, 0x75, 0x8d, 0x5c, 0x66,
	0x4a, 0x96, 0x41, 0xc3, 0x23, 0x0c, 0xbb, 0x6b, 0x9a, 0xe7, 0x21, 0xa3, 0xf5, 0xfc, 0xfe, 0x64,
	0x84, 0xb5, 0x5b, 0xdc, 0xba, 0xc5, 0x8b, 0xac, 0x0c, 0x5a, 0x08, 0xf9, 0xd0, 0x52, 0xa1, 0x64,
	0x54, 0xd9, 0x66, 0x8d, 0x0f, 0xdb, 0x2f, 0xb5, 0x31, 0x82, 0xa6, 0x5e, 0x91, 0x39, 0xcd, 0x2a,
	0x4f, 0xfb, 0x7f, 0x91, 0xba, 0x8e, 0x1c, 0xd8, 0x13, 0x85, 0x62, 0x82, 0x67, 0xcc, 0xee, 0x78,
	0xc0, 0xef, 0x05, 0x3f, 0x1a, 0x9d, 0xc3, 0xae, 0x92, 0x61, 0x5c, 0x95, 0xac, 0x3a, 0xda, 0xc9,
	0xaf, 0xd1, 0xee, 0x34, 0xa3, 0xb3, 0xb5, 0x1d, 0xce, 0x19, 0xec, 0xef, 0x64, 0x46, 0x43, 0x68,
	0x3e, 0xd1, 0xb2, 0x59, 0x6e, 0xf5, 0x8a, 0x46, 0xb0, 0xb3, 0x09, 0xd3, 0x82, 0x36, 0xbb, 0xd5,
	0x62, 0x6e, 0xcc, 0x80, 0x33, 0x87, 0x83, 0xdd, 0x99, 0xff, 0xe9, 0xbd, 0xb8, 0x7a, 0xdf, 0xba,
	0xe0, 0x63, 0xeb, 0x82, 0xcf, 0xad, 0x0b, 0x5e, 0xbf, 0xdc, 0xbd, 0x87, 0x29, 0xe3, 0x6a, 0x55,
	0x44, 0x38, 0x16, 0x6b, 0xf2, 0x52, 0x08, 0x59, 0xac, 0x63, 0x91, 0x29, 0x29, 0x52, 0xd2, 0xec,
	0x35, 0x27, 0x9b, 0x09, 0x89, 0x0a, 0x9e, 0x26, 0x84, 0x89, 0xe6, 0x16, 0x45, 0x56, 0xfd, 0x0b,
	0x4e, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x68, 0x7c, 0x9d, 0xc7, 0x5d, 0x02, 0x00, 0x00,
}
