// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: signatures/signatures.proto

/*
	Package signatures is a generated protocol buffer package.

	It is generated from these files:
		signatures/signatures.proto

	It has these top-level messages:
		PublicKey
		Ownership
		Signature
		TreeState
*/
package signatures

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PublicKey_Type int32

const (
	PublicKey_KeyTypeBLSGroupSig PublicKey_Type = 0
	PublicKey_KeyTypeSecp256k1   PublicKey_Type = 1
)

var PublicKey_Type_name = map[int32]string{
	0: "KeyTypeBLSGroupSig",
	1: "KeyTypeSecp256k1",
}
var PublicKey_Type_value = map[string]int32{
	"KeyTypeBLSGroupSig": 0,
	"KeyTypeSecp256k1":   1,
}

func (x PublicKey_Type) String() string {
	return proto.EnumName(PublicKey_Type_name, int32(x))
}
func (PublicKey_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorSignatures, []int{0, 0} }

type PublicKey struct {
	Type      PublicKey_Type `protobuf:"varint,1,opt,name=type,proto3,enum=signatures.PublicKey_Type" json:"type,omitempty"`
	PublicKey []byte         `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptorSignatures, []int{0} }

func (m *PublicKey) GetType() PublicKey_Type {
	if m != nil {
		return m.Type
	}
	return PublicKey_KeyTypeBLSGroupSig
}

func (m *PublicKey) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type Ownership struct {
	Id         string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PublicKey  *PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	Conditions string     `protobuf:"bytes,3,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *Ownership) Reset()                    { *m = Ownership{} }
func (m *Ownership) String() string            { return proto.CompactTextString(m) }
func (*Ownership) ProtoMessage()               {}
func (*Ownership) Descriptor() ([]byte, []int) { return fileDescriptorSignatures, []int{1} }

func (m *Ownership) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Ownership) GetPublicKey() *PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Ownership) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

type Signature struct {
	Ownership *Ownership `protobuf:"bytes,1,opt,name=ownership" json:"ownership,omitempty"`
	Signers   []uint32   `protobuf:"varint,2,rep,packed,name=signers" json:"signers,omitempty"`
	Signature []byte     `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	PreImage  string     `protobuf:"bytes,4,opt,name=pre_image,json=preImage,proto3" json:"pre_image,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptorSignatures, []int{2} }

func (m *Signature) GetOwnership() *Ownership {
	if m != nil {
		return m.Ownership
	}
	return nil
}

func (m *Signature) GetSigners() []uint32 {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Signature) GetPreImage() string {
	if m != nil {
		return m.PreImage
	}
	return ""
}

type TreeState struct {
	Signature     *Signature `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	ObjectId      []byte     `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	PreviousTip   []byte     `protobuf:"bytes,3,opt,name=previous_tip,json=previousTip,proto3" json:"previous_tip,omitempty"`
	NewTip        []byte     `protobuf:"bytes,4,opt,name=new_tip,json=newTip,proto3" json:"new_tip,omitempty"`
	TransactionId []byte     `protobuf:"bytes,5,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Height        uint64     `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	View          uint64     `protobuf:"varint,7,opt,name=view,proto3" json:"view,omitempty"`
	Cycle         uint64     `protobuf:"varint,8,opt,name=cycle,proto3" json:"cycle,omitempty"`
}

func (m *TreeState) Reset()                    { *m = TreeState{} }
func (m *TreeState) String() string            { return proto.CompactTextString(m) }
func (*TreeState) ProtoMessage()               {}
func (*TreeState) Descriptor() ([]byte, []int) { return fileDescriptorSignatures, []int{3} }

func (m *TreeState) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *TreeState) GetObjectId() []byte {
	if m != nil {
		return m.ObjectId
	}
	return nil
}

func (m *TreeState) GetPreviousTip() []byte {
	if m != nil {
		return m.PreviousTip
	}
	return nil
}

func (m *TreeState) GetNewTip() []byte {
	if m != nil {
		return m.NewTip
	}
	return nil
}

func (m *TreeState) GetTransactionId() []byte {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *TreeState) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TreeState) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *TreeState) GetCycle() uint64 {
	if m != nil {
		return m.Cycle
	}
	return 0
}

func init() {
	proto.RegisterType((*PublicKey)(nil), "signatures.PublicKey")
	proto.RegisterType((*Ownership)(nil), "signatures.Ownership")
	proto.RegisterType((*Signature)(nil), "signatures.Signature")
	proto.RegisterType((*TreeState)(nil), "signatures.TreeState")
	proto.RegisterEnum("signatures.PublicKey_Type", PublicKey_Type_name, PublicKey_Type_value)
}
func (m *PublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(m.Type))
	}
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	return i, nil
}

func (m *Ownership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ownership) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.PublicKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(m.PublicKey.Size()))
		n1, err := m.PublicKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Conditions) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(len(m.Conditions)))
		i += copy(dAtA[i:], m.Conditions)
	}
	return i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ownership != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(m.Ownership.Size()))
		n2, err := m.Ownership.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Signers) > 0 {
		dAtA4 := make([]byte, len(m.Signers)*10)
		var j3 int
		for _, num := range m.Signers {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if len(m.PreImage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(len(m.PreImage)))
		i += copy(dAtA[i:], m.PreImage)
	}
	return i, nil
}

func (m *TreeState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(m.Signature.Size()))
		n5, err := m.Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.ObjectId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(len(m.ObjectId)))
		i += copy(dAtA[i:], m.ObjectId)
	}
	if len(m.PreviousTip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(len(m.PreviousTip)))
		i += copy(dAtA[i:], m.PreviousTip)
	}
	if len(m.NewTip) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(len(m.NewTip)))
		i += copy(dAtA[i:], m.NewTip)
	}
	if len(m.TransactionId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(len(m.TransactionId)))
		i += copy(dAtA[i:], m.TransactionId)
	}
	if m.Height != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(m.Height))
	}
	if m.View != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(m.View))
	}
	if m.Cycle != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSignatures(dAtA, i, uint64(m.Cycle))
	}
	return i, nil
}

func encodeVarintSignatures(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PublicKey) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSignatures(uint64(m.Type))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSignatures(uint64(l))
	}
	return n
}

func (m *Ownership) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSignatures(uint64(l))
	}
	if m.PublicKey != nil {
		l = m.PublicKey.Size()
		n += 1 + l + sovSignatures(uint64(l))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovSignatures(uint64(l))
	}
	return n
}

func (m *Signature) Size() (n int) {
	var l int
	_ = l
	if m.Ownership != nil {
		l = m.Ownership.Size()
		n += 1 + l + sovSignatures(uint64(l))
	}
	if len(m.Signers) > 0 {
		l = 0
		for _, e := range m.Signers {
			l += sovSignatures(uint64(e))
		}
		n += 1 + sovSignatures(uint64(l)) + l
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSignatures(uint64(l))
	}
	l = len(m.PreImage)
	if l > 0 {
		n += 1 + l + sovSignatures(uint64(l))
	}
	return n
}

func (m *TreeState) Size() (n int) {
	var l int
	_ = l
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovSignatures(uint64(l))
	}
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovSignatures(uint64(l))
	}
	l = len(m.PreviousTip)
	if l > 0 {
		n += 1 + l + sovSignatures(uint64(l))
	}
	l = len(m.NewTip)
	if l > 0 {
		n += 1 + l + sovSignatures(uint64(l))
	}
	l = len(m.TransactionId)
	if l > 0 {
		n += 1 + l + sovSignatures(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovSignatures(uint64(m.Height))
	}
	if m.View != 0 {
		n += 1 + sovSignatures(uint64(m.View))
	}
	if m.Cycle != 0 {
		n += 1 + sovSignatures(uint64(m.Cycle))
	}
	return n
}

func sovSignatures(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSignatures(x uint64) (n int) {
	return sovSignatures(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PublicKey_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ownership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ownership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ownership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicKey == nil {
				m.PublicKey = &PublicKey{}
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ownership", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ownership == nil {
				m.Ownership = &Ownership{}
			}
			if err := m.Ownership.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSignatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Signers = append(m.Signers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSignatures
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSignatures
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSignatures
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Signers = append(m.Signers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = append(m.ObjectId[:0], dAtA[iNdEx:postIndex]...)
			if m.ObjectId == nil {
				m.ObjectId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousTip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousTip = append(m.PreviousTip[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousTip == nil {
				m.PreviousTip = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewTip = append(m.NewTip[:0], dAtA[iNdEx:postIndex]...)
			if m.NewTip == nil {
				m.NewTip = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionId = append(m.TransactionId[:0], dAtA[iNdEx:postIndex]...)
			if m.TransactionId == nil {
				m.TransactionId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycle", wireType)
			}
			m.Cycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cycle |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSignatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignatures(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignatures
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSignatures
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSignatures
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSignatures(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSignatures = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignatures   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("signatures/signatures.proto", fileDescriptorSignatures) }

var fileDescriptorSignatures = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbb, 0xa9, 0x9b, 0xc6, 0xd3, 0x34, 0x8a, 0x56, 0xa5, 0x58, 0x14, 0xa2, 0x10, 0x09,
	0x29, 0x27, 0x5b, 0xa4, 0x05, 0x71, 0xee, 0x05, 0x85, 0x22, 0x81, 0xec, 0x9c, 0xb8, 0x44, 0xfe,
	0x33, 0x72, 0x96, 0x26, 0xde, 0xed, 0xee, 0x3a, 0x91, 0xaf, 0x3c, 0x41, 0x2f, 0xbc, 0x13, 0x47,
	0x1e, 0x01, 0x85, 0x17, 0x41, 0xde, 0xc6, 0xb1, 0x55, 0x7a, 0x9b, 0xf9, 0xcd, 0xb7, 0xdf, 0x7c,
	0xf6, 0x6a, 0xe1, 0x42, 0xb1, 0x34, 0x0b, 0x75, 0x2e, 0x51, 0x79, 0x75, 0xe9, 0x0a, 0xc9, 0x35,
	0xa7, 0x50, 0x93, 0xd1, 0x3d, 0x01, 0xfb, 0x6b, 0x1e, 0x2d, 0x59, 0x7c, 0x83, 0x05, 0x75, 0xc1,
	0xd2, 0x85, 0x40, 0x87, 0x0c, 0xc9, 0xb8, 0x37, 0x79, 0xe1, 0x36, 0x8e, 0xee, 0x45, 0xee, 0xac,
	0x10, 0xe8, 0x1b, 0x1d, 0x7d, 0x05, 0x20, 0x0c, 0x9f, 0xdf, 0x62, 0xe1, 0xb4, 0x86, 0x64, 0xdc,
	0xf5, 0x6d, 0x51, 0x29, 0x47, 0x57, 0x60, 0x95, 0x62, 0x7a, 0x0e, 0xf4, 0x06, 0x8b, 0xb2, 0xbc,
	0xfe, 0x1c, 0x7c, 0x94, 0x3c, 0x17, 0x01, 0x4b, 0xfb, 0x07, 0xf4, 0x0c, 0xfa, 0x3b, 0x1e, 0x60,
	0x2c, 0x26, 0xef, 0xde, 0xdf, 0xbe, 0xed, 0x93, 0xd1, 0x1d, 0xd8, 0x5f, 0x36, 0x19, 0x4a, 0xb5,
	0x60, 0x82, 0xf6, 0xa0, 0xc5, 0x12, 0x93, 0xc7, 0xf6, 0x5b, 0x2c, 0xa1, 0x57, 0xff, 0x6d, 0x3c,
	0x99, 0x3c, 0x7b, 0x32, 0x67, 0x23, 0x08, 0x1d, 0x00, 0xc4, 0x3c, 0x4b, 0x98, 0x66, 0x3c, 0x53,
	0xce, 0xa1, 0x71, 0x6b, 0x90, 0xd1, 0x4f, 0x02, 0x76, 0x50, 0x79, 0xd0, 0x4b, 0xb0, 0x79, 0x15,
	0xc0, 0xac, 0x7e, 0xb4, 0x62, 0x9f, 0xce, 0xaf, 0x75, 0xd4, 0x81, 0xe3, 0x52, 0x82, 0x52, 0x39,
	0xad, 0xe1, 0xe1, 0xf8, 0xd4, 0xaf, 0x5a, 0xfa, 0x12, 0xec, 0xfd, 0x61, 0xb3, 0xbb, 0xeb, 0xd7,
	0x80, 0x5e, 0x80, 0x2d, 0x24, 0xce, 0xd9, 0x2a, 0x4c, 0xd1, 0xb1, 0x4c, 0xb2, 0x8e, 0x90, 0x38,
	0x2d, 0xfb, 0xd1, 0x8f, 0x16, 0xd8, 0x33, 0x89, 0x18, 0xe8, 0x50, 0x9b, 0x5c, 0xb5, 0xd1, 0x13,
	0xb9, 0xf6, 0x5f, 0xf0, 0xc8, 0x9f, 0x47, 0xdf, 0x31, 0xd6, 0x73, 0x96, 0xec, 0x6e, 0xa8, 0xf3,
	0x00, 0xa6, 0x09, 0x7d, 0x0d, 0x5d, 0x21, 0x71, 0xcd, 0x78, 0xae, 0xe6, 0x9a, 0x89, 0x5d, 0xba,
	0x93, 0x8a, 0xcd, 0x98, 0xa0, 0xcf, 0xe1, 0x38, 0xc3, 0x8d, 0x99, 0x5a, 0x66, 0xda, 0xce, 0x70,
	0x53, 0x0e, 0xde, 0x40, 0x4f, 0xcb, 0x30, 0x53, 0x61, 0x5c, 0xfe, 0xc3, 0xd2, 0xfd, 0xc8, 0xcc,
	0x4f, 0x1b, 0x74, 0x9a, 0xd0, 0x73, 0x68, 0x2f, 0x90, 0xa5, 0x0b, 0xed, 0xb4, 0x87, 0x64, 0x6c,
	0xf9, 0xbb, 0x8e, 0x52, 0xb0, 0xd6, 0x0c, 0x37, 0xce, 0xb1, 0xa1, 0xa6, 0xa6, 0x67, 0x70, 0x14,
	0x17, 0xf1, 0x12, 0x9d, 0x8e, 0x81, 0x0f, 0xcd, 0xf5, 0xa7, 0x5f, 0xdb, 0x01, 0xf9, 0xbd, 0x1d,
	0x90, 0x3f, 0xdb, 0x01, 0xb9, 0xff, 0x3b, 0x38, 0xf8, 0xf6, 0x21, 0x65, 0x7a, 0x91, 0x47, 0x6e,
	0xcc, 0x57, 0xde, 0x5d, 0xce, 0x65, 0xbe, 0x8a, 0x79, 0xa6, 0x25, 0x5f, 0x7a, 0x2b, 0x54, 0x2a,
	0x4c, 0x51, 0x79, 0xeb, 0x89, 0x17, 0xe5, 0x6c, 0x99, 0x78, 0x29, 0x6f, 0x3c, 0x80, 0xa8, 0x6d,
	0x5e, 0xc0, 0xe5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x07, 0xf3, 0x98, 0x20, 0x03, 0x00,
	0x00,
}
