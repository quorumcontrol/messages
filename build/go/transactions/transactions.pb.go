// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transactions/transactions.proto

package transactions

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	gossip "github.com/quorumcontrol/messages/v2/build/go/gossip"
	signatures "github.com/quorumcontrol/messages/v2/build/go/signatures"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Transaction_Type int32

const (
	Transaction_UNKNOWN        Transaction_Type = 0
	Transaction_SETDATA        Transaction_Type = 1
	Transaction_SETOWNERSHIP   Transaction_Type = 2
	Transaction_ESTABLISHTOKEN Transaction_Type = 3
	Transaction_MINTTOKEN      Transaction_Type = 4
	Transaction_SENDTOKEN      Transaction_Type = 5
	Transaction_RECEIVETOKEN   Transaction_Type = 6
	Transaction_STAKE          Transaction_Type = 7
)

var Transaction_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "SETDATA",
	2: "SETOWNERSHIP",
	3: "ESTABLISHTOKEN",
	4: "MINTTOKEN",
	5: "SENDTOKEN",
	6: "RECEIVETOKEN",
	7: "STAKE",
}

var Transaction_Type_value = map[string]int32{
	"UNKNOWN":        0,
	"SETDATA":        1,
	"SETOWNERSHIP":   2,
	"ESTABLISHTOKEN": 3,
	"MINTTOKEN":      4,
	"SENDTOKEN":      5,
	"RECEIVETOKEN":   6,
	"STAKE":          7,
}

func (x Transaction_Type) String() string {
	return proto.EnumName(Transaction_Type_name, int32(x))
}

func (Transaction_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{9, 0}
}

type SetDataPayload struct {
	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetDataPayload) Reset()         { *m = SetDataPayload{} }
func (m *SetDataPayload) String() string { return proto.CompactTextString(m) }
func (*SetDataPayload) ProtoMessage()    {}
func (*SetDataPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{0}
}
func (m *SetDataPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDataPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDataPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDataPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDataPayload.Merge(m, src)
}
func (m *SetDataPayload) XXX_Size() int {
	return m.Size()
}
func (m *SetDataPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDataPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SetDataPayload proto.InternalMessageInfo

func (m *SetDataPayload) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SetDataPayload) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SetOwnershipPayload struct {
	Authentication []string `protobuf:"bytes,1,rep,name=authentication,proto3" json:"authentication,omitempty"`
}

func (m *SetOwnershipPayload) Reset()         { *m = SetOwnershipPayload{} }
func (m *SetOwnershipPayload) String() string { return proto.CompactTextString(m) }
func (*SetOwnershipPayload) ProtoMessage()    {}
func (*SetOwnershipPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{1}
}
func (m *SetOwnershipPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOwnershipPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOwnershipPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOwnershipPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOwnershipPayload.Merge(m, src)
}
func (m *SetOwnershipPayload) XXX_Size() int {
	return m.Size()
}
func (m *SetOwnershipPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOwnershipPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SetOwnershipPayload proto.InternalMessageInfo

func (m *SetOwnershipPayload) GetAuthentication() []string {
	if m != nil {
		return m.Authentication
	}
	return nil
}

type TokenMonetaryPolicy struct {
	Maximum uint64 `protobuf:"varint,1,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (m *TokenMonetaryPolicy) Reset()         { *m = TokenMonetaryPolicy{} }
func (m *TokenMonetaryPolicy) String() string { return proto.CompactTextString(m) }
func (*TokenMonetaryPolicy) ProtoMessage()    {}
func (*TokenMonetaryPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{2}
}
func (m *TokenMonetaryPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMonetaryPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMonetaryPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMonetaryPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMonetaryPolicy.Merge(m, src)
}
func (m *TokenMonetaryPolicy) XXX_Size() int {
	return m.Size()
}
func (m *TokenMonetaryPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMonetaryPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMonetaryPolicy proto.InternalMessageInfo

func (m *TokenMonetaryPolicy) GetMaximum() uint64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

type EstablishTokenPayload struct {
	Name           string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MonetaryPolicy *TokenMonetaryPolicy `protobuf:"bytes,2,opt,name=monetary_policy,json=monetaryPolicy,proto3" json:"monetary_policy,omitempty"`
}

func (m *EstablishTokenPayload) Reset()         { *m = EstablishTokenPayload{} }
func (m *EstablishTokenPayload) String() string { return proto.CompactTextString(m) }
func (*EstablishTokenPayload) ProtoMessage()    {}
func (*EstablishTokenPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{3}
}
func (m *EstablishTokenPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstablishTokenPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstablishTokenPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstablishTokenPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstablishTokenPayload.Merge(m, src)
}
func (m *EstablishTokenPayload) XXX_Size() int {
	return m.Size()
}
func (m *EstablishTokenPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_EstablishTokenPayload.DiscardUnknown(m)
}

var xxx_messageInfo_EstablishTokenPayload proto.InternalMessageInfo

func (m *EstablishTokenPayload) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EstablishTokenPayload) GetMonetaryPolicy() *TokenMonetaryPolicy {
	if m != nil {
		return m.MonetaryPolicy
	}
	return nil
}

type MintTokenPayload struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MintTokenPayload) Reset()         { *m = MintTokenPayload{} }
func (m *MintTokenPayload) String() string { return proto.CompactTextString(m) }
func (*MintTokenPayload) ProtoMessage()    {}
func (*MintTokenPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{4}
}
func (m *MintTokenPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintTokenPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintTokenPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintTokenPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintTokenPayload.Merge(m, src)
}
func (m *MintTokenPayload) XXX_Size() int {
	return m.Size()
}
func (m *MintTokenPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MintTokenPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MintTokenPayload proto.InternalMessageInfo

func (m *MintTokenPayload) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MintTokenPayload) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type SendTokenPayload struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Amount      uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Destination string `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (m *SendTokenPayload) Reset()         { *m = SendTokenPayload{} }
func (m *SendTokenPayload) String() string { return proto.CompactTextString(m) }
func (*SendTokenPayload) ProtoMessage()    {}
func (*SendTokenPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{5}
}
func (m *SendTokenPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendTokenPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendTokenPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendTokenPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTokenPayload.Merge(m, src)
}
func (m *SendTokenPayload) XXX_Size() int {
	return m.Size()
}
func (m *SendTokenPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTokenPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SendTokenPayload proto.InternalMessageInfo

func (m *SendTokenPayload) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SendTokenPayload) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SendTokenPayload) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SendTokenPayload) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type ReceiveTokenPayload struct {
	SendTokenTransactionId string                `protobuf:"bytes,1,opt,name=send_token_transaction_id,json=sendTokenTransactionId,proto3" json:"send_token_transaction_id,omitempty"`
	Tip                    []byte                `protobuf:"bytes,2,opt,name=tip,proto3" json:"tip,omitempty"`
	TreeState              *signatures.TreeState `protobuf:"bytes,3,opt,name=tree_state,json=treeState,proto3" json:"tree_state,omitempty"`
	Leaves                 [][]byte              `protobuf:"bytes,4,rep,name=Leaves,proto3" json:"Leaves,omitempty"`
	Proof                  *gossip.Proof         `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ReceiveTokenPayload) Reset()         { *m = ReceiveTokenPayload{} }
func (m *ReceiveTokenPayload) String() string { return proto.CompactTextString(m) }
func (*ReceiveTokenPayload) ProtoMessage()    {}
func (*ReceiveTokenPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{6}
}
func (m *ReceiveTokenPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceiveTokenPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceiveTokenPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceiveTokenPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveTokenPayload.Merge(m, src)
}
func (m *ReceiveTokenPayload) XXX_Size() int {
	return m.Size()
}
func (m *ReceiveTokenPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveTokenPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveTokenPayload proto.InternalMessageInfo

func (m *ReceiveTokenPayload) GetSendTokenTransactionId() string {
	if m != nil {
		return m.SendTokenTransactionId
	}
	return ""
}

func (m *ReceiveTokenPayload) GetTip() []byte {
	if m != nil {
		return m.Tip
	}
	return nil
}

func (m *ReceiveTokenPayload) GetTreeState() *signatures.TreeState {
	if m != nil {
		return m.TreeState
	}
	return nil
}

func (m *ReceiveTokenPayload) GetLeaves() [][]byte {
	if m != nil {
		return m.Leaves
	}
	return nil
}

func (m *ReceiveTokenPayload) GetProof() *gossip.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type TokenPayload struct {
	TransactionId string                `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Tip           string                `protobuf:"bytes,2,opt,name=tip,proto3" json:"tip,omitempty"`
	TreeState     *signatures.TreeState `protobuf:"bytes,3,opt,name=tree_state,json=treeState,proto3" json:"tree_state,omitempty"`
	Leaves        [][]byte              `protobuf:"bytes,4,rep,name=leaves,proto3" json:"leaves,omitempty"`
}

func (m *TokenPayload) Reset()         { *m = TokenPayload{} }
func (m *TokenPayload) String() string { return proto.CompactTextString(m) }
func (*TokenPayload) ProtoMessage()    {}
func (*TokenPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{7}
}
func (m *TokenPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPayload.Merge(m, src)
}
func (m *TokenPayload) XXX_Size() int {
	return m.Size()
}
func (m *TokenPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPayload.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPayload proto.InternalMessageInfo

func (m *TokenPayload) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *TokenPayload) GetTip() string {
	if m != nil {
		return m.Tip
	}
	return ""
}

func (m *TokenPayload) GetTreeState() *signatures.TreeState {
	if m != nil {
		return m.TreeState
	}
	return nil
}

func (m *TokenPayload) GetLeaves() [][]byte {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type StakePayload struct {
	GroupId string                `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Amount  uint64                `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	DstKey  *signatures.PublicKey `protobuf:"bytes,3,opt,name=dst_key,json=dstKey,proto3" json:"dst_key,omitempty"`
	VerKey  *signatures.PublicKey `protobuf:"bytes,4,opt,name=ver_key,json=verKey,proto3" json:"ver_key,omitempty"`
}

func (m *StakePayload) Reset()         { *m = StakePayload{} }
func (m *StakePayload) String() string { return proto.CompactTextString(m) }
func (*StakePayload) ProtoMessage()    {}
func (*StakePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{8}
}
func (m *StakePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakePayload.Merge(m, src)
}
func (m *StakePayload) XXX_Size() int {
	return m.Size()
}
func (m *StakePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_StakePayload.DiscardUnknown(m)
}

var xxx_messageInfo_StakePayload proto.InternalMessageInfo

func (m *StakePayload) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *StakePayload) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *StakePayload) GetDstKey() *signatures.PublicKey {
	if m != nil {
		return m.DstKey
	}
	return nil
}

func (m *StakePayload) GetVerKey() *signatures.PublicKey {
	if m != nil {
		return m.VerKey
	}
	return nil
}

type Transaction struct {
	Type                  Transaction_Type       `protobuf:"varint,1,opt,name=type,proto3,enum=v2transactions.Transaction_Type" json:"type,omitempty"`
	SetDataPayload        *SetDataPayload        `protobuf:"bytes,2,opt,name=set_data_payload,json=setDataPayload,proto3" json:"set_data_payload,omitempty"`
	SetOwnershipPayload   *SetOwnershipPayload   `protobuf:"bytes,3,opt,name=set_ownership_payload,json=setOwnershipPayload,proto3" json:"set_ownership_payload,omitempty"`
	EstablishTokenPayload *EstablishTokenPayload `protobuf:"bytes,4,opt,name=establish_token_payload,json=establishTokenPayload,proto3" json:"establish_token_payload,omitempty"`
	MintTokenPayload      *MintTokenPayload      `protobuf:"bytes,5,opt,name=mint_token_payload,json=mintTokenPayload,proto3" json:"mint_token_payload,omitempty"`
	SendTokenPayload      *SendTokenPayload      `protobuf:"bytes,6,opt,name=send_token_payload,json=sendTokenPayload,proto3" json:"send_token_payload,omitempty"`
	ReceiveTokenPayload   *ReceiveTokenPayload   `protobuf:"bytes,7,opt,name=receive_token_payload,json=receiveTokenPayload,proto3" json:"receive_token_payload,omitempty"`
	StakePayload          *StakePayload          `protobuf:"bytes,8,opt,name=stake_payload,json=stakePayload,proto3" json:"stake_payload,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af93f5a77b9779a, []int{9}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetType() Transaction_Type {
	if m != nil {
		return m.Type
	}
	return Transaction_UNKNOWN
}

func (m *Transaction) GetSetDataPayload() *SetDataPayload {
	if m != nil {
		return m.SetDataPayload
	}
	return nil
}

func (m *Transaction) GetSetOwnershipPayload() *SetOwnershipPayload {
	if m != nil {
		return m.SetOwnershipPayload
	}
	return nil
}

func (m *Transaction) GetEstablishTokenPayload() *EstablishTokenPayload {
	if m != nil {
		return m.EstablishTokenPayload
	}
	return nil
}

func (m *Transaction) GetMintTokenPayload() *MintTokenPayload {
	if m != nil {
		return m.MintTokenPayload
	}
	return nil
}

func (m *Transaction) GetSendTokenPayload() *SendTokenPayload {
	if m != nil {
		return m.SendTokenPayload
	}
	return nil
}

func (m *Transaction) GetReceiveTokenPayload() *ReceiveTokenPayload {
	if m != nil {
		return m.ReceiveTokenPayload
	}
	return nil
}

func (m *Transaction) GetStakePayload() *StakePayload {
	if m != nil {
		return m.StakePayload
	}
	return nil
}

func init() {
	proto.RegisterEnum("v2transactions.Transaction_Type", Transaction_Type_name, Transaction_Type_value)
	proto.RegisterType((*SetDataPayload)(nil), "v2transactions.SetDataPayload")
	proto.RegisterType((*SetOwnershipPayload)(nil), "v2transactions.SetOwnershipPayload")
	proto.RegisterType((*TokenMonetaryPolicy)(nil), "v2transactions.TokenMonetaryPolicy")
	proto.RegisterType((*EstablishTokenPayload)(nil), "v2transactions.EstablishTokenPayload")
	proto.RegisterType((*MintTokenPayload)(nil), "v2transactions.MintTokenPayload")
	proto.RegisterType((*SendTokenPayload)(nil), "v2transactions.SendTokenPayload")
	proto.RegisterType((*ReceiveTokenPayload)(nil), "v2transactions.ReceiveTokenPayload")
	proto.RegisterType((*TokenPayload)(nil), "v2transactions.TokenPayload")
	proto.RegisterType((*StakePayload)(nil), "v2transactions.StakePayload")
	proto.RegisterType((*Transaction)(nil), "v2transactions.Transaction")
}

func init() { proto.RegisterFile("transactions/transactions.proto", fileDescriptor_8af93f5a77b9779a) }

var fileDescriptor_8af93f5a77b9779a = []byte{
	// 875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0xf3, 0x73, 0xf3, 0x92, 0x06, 0x6b, 0x42, 0x77, 0xb3, 0x0b, 0x0a, 0x91, 0x57, 0x8b,
	0x7a, 0x4a, 0x50, 0x40, 0x48, 0xac, 0x04, 0x52, 0x96, 0x5a, 0x6a, 0x94, 0x36, 0x8d, 0xc6, 0x86,
	0x4a, 0x48, 0x28, 0x9a, 0xc4, 0x43, 0x32, 0x6a, 0xec, 0x31, 0x9e, 0x71, 0xc0, 0x47, 0x0e, 0xdc,
	0xb9, 0xf1, 0x17, 0xf0, 0xbf, 0x70, 0xdc, 0x1b, 0x1c, 0x51, 0xfb, 0x8f, 0x20, 0xdb, 0x71, 0x63,
	0xbb, 0x5e, 0xf5, 0xb0, 0xa7, 0xbc, 0xef, 0x8d, 0xdf, 0xe7, 0x6f, 0x5e, 0xde, 0xfb, 0x0c, 0x9f,
	0x48, 0x8f, 0x38, 0x82, 0xac, 0x24, 0xe3, 0x8e, 0x18, 0xa6, 0xc1, 0xc0, 0xf5, 0xb8, 0xe4, 0xa8,
	0xbd, 0x1b, 0xa5, 0xb3, 0x2f, 0x3a, 0x6b, 0x2e, 0x04, 0x73, 0x87, 0xf1, 0x4f, 0xfc, 0xd0, 0x8b,
	0x8f, 0x04, 0x5b, 0x3b, 0x44, 0xfa, 0x1e, 0x15, 0xc3, 0x43, 0x18, 0x1f, 0x6a, 0xaf, 0xa1, 0x6d,
	0x50, 0x79, 0x46, 0x24, 0x99, 0x93, 0x60, 0xcb, 0x89, 0x85, 0x10, 0x54, 0x5c, 0x22, 0x37, 0x5d,
	0xa5, 0xaf, 0x9c, 0x36, 0x70, 0x14, 0xa3, 0x0f, 0xa1, 0xba, 0x23, 0x5b, 0x9f, 0x76, 0x4b, 0x7d,
	0xe5, 0xb4, 0x85, 0x63, 0xa0, 0x7d, 0x0d, 0x1d, 0x83, 0xca, 0xab, 0x5f, 0x1c, 0xea, 0x89, 0x0d,
	0x73, 0x13, 0x82, 0x4f, 0xa1, 0x4d, 0x7c, 0xb9, 0xa1, 0x8e, 0x64, 0x2b, 0x12, 0xea, 0xea, 0x2a,
	0xfd, 0xf2, 0x69, 0x03, 0xe7, 0xb2, 0xda, 0x10, 0x3a, 0x26, 0xbf, 0xa1, 0xce, 0x25, 0x77, 0xa8,
	0x24, 0x5e, 0x30, 0xe7, 0x5b, 0xb6, 0x0a, 0x50, 0x17, 0xea, 0x36, 0xf9, 0x95, 0xd9, 0xbe, 0x1d,
	0x49, 0xa8, 0xe0, 0x04, 0x6a, 0x01, 0x9c, 0xe8, 0x42, 0x92, 0xe5, 0x96, 0x89, 0x4d, 0x54, 0x99,
	0x92, 0xec, 0x10, 0x9b, 0x26, 0x92, 0xc3, 0x18, 0x5d, 0xc0, 0x07, 0xf6, 0x9e, 0x78, 0xe1, 0x46,
	0xcc, 0x91, 0xf8, 0xe6, 0xe8, 0xe5, 0x20, 0xdb, 0xb4, 0x41, 0x81, 0x08, 0xdc, 0xb6, 0x33, 0x58,
	0xfb, 0x06, 0xd4, 0x4b, 0xe6, 0xc8, 0x47, 0xdf, 0xfa, 0x14, 0x6a, 0xc4, 0xe6, 0xbe, 0x23, 0xa3,
	0x97, 0x55, 0xf0, 0x1e, 0x69, 0x2e, 0xa8, 0x06, 0x75, 0xac, 0x4c, 0x7d, 0x1b, 0x4a, 0xcc, 0xda,
	0x57, 0x97, 0xd8, 0x81, 0xaf, 0x54, 0xc8, 0x57, 0x4e, 0xf3, 0xa1, 0x3e, 0x34, 0x2d, 0x2a, 0x24,
	0x73, 0xe2, 0x06, 0x57, 0xa2, 0x92, 0x74, 0x4a, 0xfb, 0x47, 0x81, 0x0e, 0xa6, 0x2b, 0xca, 0x76,
	0x34, 0xf3, 0xd6, 0xaf, 0xe0, 0xb9, 0xa0, 0x8e, 0xb5, 0x90, 0x61, 0x72, 0x91, 0x6a, 0xc4, 0xe2,
	0x5e, 0xcc, 0x53, 0x91, 0x48, 0x35, 0x0f, 0xc7, 0x13, 0x0b, 0xa9, 0x50, 0x96, 0xcc, 0xdd, 0xcf,
	0x40, 0x18, 0xa2, 0x2f, 0x01, 0xa4, 0x47, 0xe9, 0x42, 0x48, 0x22, 0x69, 0x24, 0xb1, 0x39, 0x7a,
	0x36, 0xd8, 0x8d, 0x52, 0x63, 0x66, 0x7a, 0x94, 0x1a, 0xe1, 0x31, 0x6e, 0xc8, 0x24, 0x0c, 0xaf,
	0x75, 0x41, 0xc9, 0x8e, 0x8a, 0x6e, 0xa5, 0x5f, 0x3e, 0x6d, 0xe1, 0x3d, 0x42, 0x2f, 0xa1, 0xea,
	0x7a, 0x9c, 0xff, 0xd4, 0xad, 0x46, 0x54, 0xc7, 0x83, 0xfd, 0x20, 0xcf, 0xc3, 0x24, 0x8e, 0xcf,
	0xb4, 0x3f, 0x15, 0x68, 0x65, 0xae, 0xf4, 0x0a, 0xda, 0x85, 0xf7, 0x38, 0x96, 0xef, 0x92, 0xdf,
	0x78, 0x6f, 0xf9, 0xdb, 0x8c, 0xfc, 0x18, 0x69, 0x7f, 0x29, 0xd0, 0x32, 0x24, 0xb9, 0xa1, 0x89,
	0xb2, 0xe7, 0xf0, 0x64, 0xed, 0x71, 0xdf, 0x3d, 0x68, 0xaa, 0x47, 0x78, 0x62, 0xbd, 0x6b, 0x52,
	0xd0, 0x67, 0x50, 0xb7, 0x84, 0x5c, 0xdc, 0xd0, 0xa0, 0x58, 0xd0, 0xdc, 0x5f, 0x6e, 0xd9, 0x6a,
	0x4a, 0x03, 0x5c, 0xb3, 0x84, 0x9c, 0xd2, 0x20, 0xac, 0xd8, 0x51, 0x2f, 0xaa, 0xa8, 0x3c, 0x52,
	0xb1, 0xa3, 0xde, 0x94, 0x06, 0xda, 0xef, 0x35, 0x68, 0xa6, 0xfe, 0x5a, 0xf4, 0x05, 0x54, 0x64,
	0xe0, 0xc6, 0x93, 0xdc, 0x1e, 0xf5, 0x1f, 0x2c, 0xc8, 0x01, 0x0c, 0xcc, 0xc0, 0xa5, 0x38, 0x7a,
	0x1a, 0x9d, 0x83, 0x2a, 0xa8, 0x5c, 0x58, 0x44, 0x92, 0x85, 0x1b, 0x5f, 0x78, 0xbf, 0x62, 0xbd,
	0x3c, 0x43, 0xd6, 0x62, 0x70, 0x5b, 0x64, 0x2d, 0xe7, 0x1a, 0x4e, 0x42, 0x26, 0x9e, 0x38, 0xc9,
	0x3d, 0x5d, 0xb9, 0x78, 0x63, 0x0b, 0x5c, 0x07, 0x77, 0x44, 0x81, 0x15, 0xfd, 0x08, 0xcf, 0x68,
	0xe2, 0x18, 0xfb, 0x89, 0x4f, 0xa8, 0xe3, 0x56, 0xbd, 0xca, 0x53, 0x17, 0x1a, 0x0c, 0x3e, 0xa1,
	0x85, 0xbe, 0x33, 0x03, 0x64, 0x33, 0x47, 0xe6, 0x98, 0xe3, 0xd9, 0x7d, 0xd0, 0xc5, 0xbc, 0x7f,
	0x60, 0xd5, 0xce, 0x3b, 0xca, 0x0c, 0x50, 0x6a, 0x37, 0x13, 0xbe, 0x5a, 0x31, 0x5f, 0xde, 0x4f,
	0xb0, 0x2a, 0xf2, 0x0e, 0x73, 0x0d, 0x27, 0x5e, 0x6c, 0x01, 0x39, 0xca, 0x7a, 0x71, 0x5f, 0x0b,
	0xfc, 0x02, 0x77, 0xbc, 0x02, 0x13, 0x19, 0xc3, 0xb1, 0x08, 0xe7, 0xfc, 0x9e, 0xf0, 0x49, 0x44,
	0xf8, 0xf1, 0x03, 0x8d, 0xa9, 0x65, 0xc0, 0x2d, 0x91, 0x42, 0xda, 0x6f, 0x0a, 0x54, 0xc2, 0x61,
	0x42, 0x4d, 0xa8, 0x7f, 0x37, 0x9b, 0xce, 0xae, 0xae, 0x67, 0xea, 0x51, 0x08, 0x0c, 0xdd, 0x3c,
	0x1b, 0x9b, 0x63, 0x55, 0x41, 0x2a, 0xb4, 0x0c, 0xdd, 0xbc, 0xba, 0x9e, 0xe9, 0xd8, 0x38, 0x9f,
	0xcc, 0xd5, 0x12, 0x42, 0xd0, 0xd6, 0x0d, 0x73, 0xfc, 0xe6, 0x62, 0x62, 0x9c, 0x9b, 0x57, 0x53,
	0x7d, 0xa6, 0x96, 0xd1, 0x31, 0x34, 0x2e, 0x27, 0x33, 0x33, 0x86, 0x95, 0x10, 0x1a, 0xfa, 0xec,
	0x2c, 0x86, 0xd5, 0x90, 0x03, 0xeb, 0xdf, 0xea, 0x93, 0xef, 0xf5, 0x38, 0x53, 0x43, 0x0d, 0xa8,
	0x1a, 0xe6, 0x78, 0xaa, 0xab, 0xf5, 0x37, 0xe6, 0xdf, 0xb7, 0x3d, 0xe5, 0xed, 0x6d, 0x4f, 0xf9,
	0xef, 0xb6, 0xa7, 0xfc, 0x71, 0xd7, 0x3b, 0x7a, 0x7b, 0xd7, 0x3b, 0xfa, 0xf7, 0xae, 0x77, 0xf4,
	0xc3, 0xeb, 0x35, 0x93, 0x1b, 0x7f, 0x39, 0x58, 0x71, 0x7b, 0xf8, 0xb3, 0xcf, 0x3d, 0xdf, 0x5e,
	0x71, 0x47, 0x7a, 0x7c, 0x3b, 0xb4, 0xa9, 0x10, 0x64, 0x4d, 0xc5, 0x70, 0x37, 0x1a, 0x2e, 0x7d,
	0xb6, 0xb5, 0x86, 0x6b, 0x9e, 0xf9, 0x34, 0x2f, 0x6b, 0xd1, 0x97, 0xf5, 0xf3, 0xff, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xd5, 0x5a, 0xcc, 0x53, 0xbe, 0x07, 0x00, 0x00,
}

func (m *SetDataPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDataPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDataPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetOwnershipPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOwnershipPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOwnershipPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authentication) > 0 {
		for iNdEx := len(m.Authentication) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Authentication[iNdEx])
			copy(dAtA[i:], m.Authentication[iNdEx])
			i = encodeVarintTransactions(dAtA, i, uint64(len(m.Authentication[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TokenMonetaryPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMonetaryPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMonetaryPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Maximum != 0 {
		i = encodeVarintTransactions(dAtA, i, uint64(m.Maximum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EstablishTokenPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstablishTokenPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstablishTokenPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MonetaryPolicy != nil {
		{
			size, err := m.MonetaryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MintTokenPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintTokenPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintTokenPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTransactions(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendTokenPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendTokenPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendTokenPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintTransactions(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReceiveTokenPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveTokenPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReceiveTokenPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Leaves) > 0 {
		for iNdEx := len(m.Leaves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Leaves[iNdEx])
			copy(dAtA[i:], m.Leaves[iNdEx])
			i = encodeVarintTransactions(dAtA, i, uint64(len(m.Leaves[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TreeState != nil {
		{
			size, err := m.TreeState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tip) > 0 {
		i -= len(m.Tip)
		copy(dAtA[i:], m.Tip)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.Tip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SendTokenTransactionId) > 0 {
		i -= len(m.SendTokenTransactionId)
		copy(dAtA[i:], m.SendTokenTransactionId)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.SendTokenTransactionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Leaves) > 0 {
		for iNdEx := len(m.Leaves) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Leaves[iNdEx])
			copy(dAtA[i:], m.Leaves[iNdEx])
			i = encodeVarintTransactions(dAtA, i, uint64(len(m.Leaves[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TreeState != nil {
		{
			size, err := m.TreeState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tip) > 0 {
		i -= len(m.Tip)
		copy(dAtA[i:], m.Tip)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.Tip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransactionId) > 0 {
		i -= len(m.TransactionId)
		copy(dAtA[i:], m.TransactionId)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.TransactionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerKey != nil {
		{
			size, err := m.VerKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DstKey != nil {
		{
			size, err := m.DstKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintTransactions(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintTransactions(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakePayload != nil {
		{
			size, err := m.StakePayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ReceiveTokenPayload != nil {
		{
			size, err := m.ReceiveTokenPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.SendTokenPayload != nil {
		{
			size, err := m.SendTokenPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MintTokenPayload != nil {
		{
			size, err := m.MintTokenPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.EstablishTokenPayload != nil {
		{
			size, err := m.EstablishTokenPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SetOwnershipPayload != nil {
		{
			size, err := m.SetOwnershipPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SetDataPayload != nil {
		{
			size, err := m.SetDataPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTransactions(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransactions(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransactions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetDataPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	return n
}

func (m *SetOwnershipPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Authentication) > 0 {
		for _, s := range m.Authentication {
			l = len(s)
			n += 1 + l + sovTransactions(uint64(l))
		}
	}
	return n
}

func (m *TokenMonetaryPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Maximum != 0 {
		n += 1 + sovTransactions(uint64(m.Maximum))
	}
	return n
}

func (m *EstablishTokenPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.MonetaryPolicy != nil {
		l = m.MonetaryPolicy.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	return n
}

func (m *MintTokenPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTransactions(uint64(m.Amount))
	}
	return n
}

func (m *SendTokenPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTransactions(uint64(m.Amount))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	return n
}

func (m *ReceiveTokenPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SendTokenTransactionId)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	l = len(m.Tip)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.TreeState != nil {
		l = m.TreeState.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	if len(m.Leaves) > 0 {
		for _, b := range m.Leaves {
			l = len(b)
			n += 1 + l + sovTransactions(uint64(l))
		}
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	return n
}

func (m *TokenPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionId)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	l = len(m.Tip)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.TreeState != nil {
		l = m.TreeState.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	if len(m.Leaves) > 0 {
		for _, b := range m.Leaves {
			l = len(b)
			n += 1 + l + sovTransactions(uint64(l))
		}
	}
	return n
}

func (m *StakePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTransactions(uint64(m.Amount))
	}
	if m.DstKey != nil {
		l = m.DstKey.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.VerKey != nil {
		l = m.VerKey.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	return n
}

func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTransactions(uint64(m.Type))
	}
	if m.SetDataPayload != nil {
		l = m.SetDataPayload.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.SetOwnershipPayload != nil {
		l = m.SetOwnershipPayload.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.EstablishTokenPayload != nil {
		l = m.EstablishTokenPayload.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.MintTokenPayload != nil {
		l = m.MintTokenPayload.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.SendTokenPayload != nil {
		l = m.SendTokenPayload.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.ReceiveTokenPayload != nil {
		l = m.ReceiveTokenPayload.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	if m.StakePayload != nil {
		l = m.StakePayload.Size()
		n += 1 + l + sovTransactions(uint64(l))
	}
	return n
}

func sovTransactions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransactions(x uint64) (n int) {
	return sovTransactions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetDataPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDataPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDataPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOwnershipPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOwnershipPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOwnershipPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authentication = append(m.Authentication, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenMonetaryPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMonetaryPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMonetaryPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstablishTokenPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstablishTokenPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstablishTokenPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonetaryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MonetaryPolicy == nil {
				m.MonetaryPolicy = &TokenMonetaryPolicy{}
			}
			if err := m.MonetaryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintTokenPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintTokenPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintTokenPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendTokenPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendTokenPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendTokenPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveTokenPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveTokenPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveTokenPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTokenTransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendTokenTransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tip = append(m.Tip[:0], dAtA[iNdEx:postIndex]...)
			if m.Tip == nil {
				m.Tip = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TreeState == nil {
				m.TreeState = &signatures.TreeState{}
			}
			if err := m.TreeState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaves", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leaves = append(m.Leaves, make([]byte, postIndex-iNdEx))
			copy(m.Leaves[len(m.Leaves)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &gossip.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TreeState == nil {
				m.TreeState = &signatures.TreeState{}
			}
			if err := m.TreeState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaves", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leaves = append(m.Leaves, make([]byte, postIndex-iNdEx))
			copy(m.Leaves[len(m.Leaves)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstKey == nil {
				m.DstKey = &signatures.PublicKey{}
			}
			if err := m.DstKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerKey == nil {
				m.VerKey = &signatures.PublicKey{}
			}
			if err := m.VerKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Transaction_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetDataPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SetDataPayload == nil {
				m.SetDataPayload = &SetDataPayload{}
			}
			if err := m.SetDataPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetOwnershipPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SetOwnershipPayload == nil {
				m.SetOwnershipPayload = &SetOwnershipPayload{}
			}
			if err := m.SetOwnershipPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstablishTokenPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EstablishTokenPayload == nil {
				m.EstablishTokenPayload = &EstablishTokenPayload{}
			}
			if err := m.EstablishTokenPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintTokenPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MintTokenPayload == nil {
				m.MintTokenPayload = &MintTokenPayload{}
			}
			if err := m.MintTokenPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTokenPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SendTokenPayload == nil {
				m.SendTokenPayload = &SendTokenPayload{}
			}
			if err := m.SendTokenPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveTokenPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceiveTokenPayload == nil {
				m.ReceiveTokenPayload = &ReceiveTokenPayload{}
			}
			if err := m.ReceiveTokenPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakePayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakePayload == nil {
				m.StakePayload = &StakePayload{}
			}
			if err := m.StakePayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransactions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransactions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransactions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransactions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransactions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransactions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransactions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransactions = fmt.Errorf("proto: unexpected end of group")
)
