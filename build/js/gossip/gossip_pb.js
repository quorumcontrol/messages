// source: gossip/gossip.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var services_services_pb = require('../services/services_pb.js');
goog.object.extend(proto, services_services_pb);
var signatures_signatures_pb = require('../signatures/signatures_pb.js');
goog.object.extend(proto, signatures_signatures_pb);
goog.exportSymbol('proto.gossip.Checkpoint', null, global);
goog.exportSymbol('proto.gossip.Proof', null, global);
goog.exportSymbol('proto.gossip.Round', null, global);
goog.exportSymbol('proto.gossip.RoundConfirmation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Checkpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.Checkpoint.repeatedFields_, null);
};
goog.inherits(proto.gossip.Checkpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Checkpoint.displayName = 'proto.gossip.Checkpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Round = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.Round, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Round.displayName = 'proto.gossip.Round';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.RoundConfirmation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.RoundConfirmation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.RoundConfirmation.displayName = 'proto.gossip.RoundConfirmation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Proof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.Proof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Proof.displayName = 'proto.gossip.Proof';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.Checkpoint.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Checkpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Checkpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Checkpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Checkpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    addBlockRequestsList: msg.getAddBlockRequestsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Checkpoint}
 */
proto.gossip.Checkpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Checkpoint;
  return proto.gossip.Checkpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Checkpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Checkpoint}
 */
proto.gossip.Checkpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAddBlockRequests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Checkpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Checkpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Checkpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Checkpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAddBlockRequestsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.gossip.Checkpoint.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.Checkpoint} returns this
 */
proto.gossip.Checkpoint.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated bytes add_block_requests = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.gossip.Checkpoint.prototype.getAddBlockRequestsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes add_block_requests = 2;
 * This is a type-conversion wrapper around `getAddBlockRequestsList()`
 * @return {!Array<string>}
 */
proto.gossip.Checkpoint.prototype.getAddBlockRequestsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAddBlockRequestsList()));
};


/**
 * repeated bytes add_block_requests = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddBlockRequestsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.gossip.Checkpoint.prototype.getAddBlockRequestsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAddBlockRequestsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.gossip.Checkpoint} returns this
 */
proto.gossip.Checkpoint.prototype.setAddBlockRequestsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.gossip.Checkpoint} returns this
 */
proto.gossip.Checkpoint.prototype.addAddBlockRequests = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.Checkpoint} returns this
 */
proto.gossip.Checkpoint.prototype.clearAddBlockRequestsList = function() {
  return this.setAddBlockRequestsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Round.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Round.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Round} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Round.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    checkpointCid: msg.getCheckpointCid_asB64(),
    stateCid: msg.getStateCid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Round}
 */
proto.gossip.Round.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Round;
  return proto.gossip.Round.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Round} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Round}
 */
proto.gossip.Round.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCheckpointCid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Round.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Round.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Round} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Round.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCheckpointCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStateCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.gossip.Round.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.Round} returns this
 */
proto.gossip.Round.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes checkpoint_cid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.Round.prototype.getCheckpointCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes checkpoint_cid = 2;
 * This is a type-conversion wrapper around `getCheckpointCid()`
 * @return {string}
 */
proto.gossip.Round.prototype.getCheckpointCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCheckpointCid()));
};


/**
 * optional bytes checkpoint_cid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCheckpointCid()`
 * @return {!Uint8Array}
 */
proto.gossip.Round.prototype.getCheckpointCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCheckpointCid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.Round} returns this
 */
proto.gossip.Round.prototype.setCheckpointCid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes state_cid = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.Round.prototype.getStateCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes state_cid = 3;
 * This is a type-conversion wrapper around `getStateCid()`
 * @return {string}
 */
proto.gossip.Round.prototype.getStateCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateCid()));
};


/**
 * optional bytes state_cid = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateCid()`
 * @return {!Uint8Array}
 */
proto.gossip.Round.prototype.getStateCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateCid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.Round} returns this
 */
proto.gossip.Round.prototype.setStateCid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.RoundConfirmation.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.RoundConfirmation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.RoundConfirmation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.RoundConfirmation.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roundCid: msg.getRoundCid_asB64(),
    signature: (f = msg.getSignature()) && signatures_signatures_pb.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.RoundConfirmation}
 */
proto.gossip.RoundConfirmation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.RoundConfirmation;
  return proto.gossip.RoundConfirmation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.RoundConfirmation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.RoundConfirmation}
 */
proto.gossip.RoundConfirmation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoundCid(value);
      break;
    case 3:
      var value = new signatures_signatures_pb.Signature;
      reader.readMessage(value,signatures_signatures_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.RoundConfirmation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.RoundConfirmation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.RoundConfirmation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.RoundConfirmation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRoundCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      signatures_signatures_pb.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.gossip.RoundConfirmation.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.RoundConfirmation} returns this
 */
proto.gossip.RoundConfirmation.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes round_cid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.RoundConfirmation.prototype.getRoundCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes round_cid = 2;
 * This is a type-conversion wrapper around `getRoundCid()`
 * @return {string}
 */
proto.gossip.RoundConfirmation.prototype.getRoundCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoundCid()));
};


/**
 * optional bytes round_cid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoundCid()`
 * @return {!Uint8Array}
 */
proto.gossip.RoundConfirmation.prototype.getRoundCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoundCid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.RoundConfirmation} returns this
 */
proto.gossip.RoundConfirmation.prototype.setRoundCid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional v2signatures.Signature signature = 3;
 * @return {?proto.v2signatures.Signature}
 */
proto.gossip.RoundConfirmation.prototype.getSignature = function() {
  return /** @type{?proto.v2signatures.Signature} */ (
    jspb.Message.getWrapperField(this, signatures_signatures_pb.Signature, 3));
};


/**
 * @param {?proto.v2signatures.Signature|undefined} value
 * @return {!proto.gossip.RoundConfirmation} returns this
*/
proto.gossip.RoundConfirmation.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.RoundConfirmation} returns this
 */
proto.gossip.RoundConfirmation.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.RoundConfirmation.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Proof.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Proof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Proof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Proof.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: msg.getObjectId_asB64(),
    tip: msg.getTip_asB64(),
    addBlockRequest: (f = msg.getAddBlockRequest()) && services_services_pb.AddBlockRequest.toObject(includeInstance, f),
    checkpoint: (f = msg.getCheckpoint()) && proto.gossip.Checkpoint.toObject(includeInstance, f),
    round: (f = msg.getRound()) && proto.gossip.Round.toObject(includeInstance, f),
    roundConfirmation: (f = msg.getRoundConfirmation()) && proto.gossip.RoundConfirmation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Proof}
 */
proto.gossip.Proof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Proof;
  return proto.gossip.Proof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Proof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Proof}
 */
proto.gossip.Proof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setObjectId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTip(value);
      break;
    case 3:
      var value = new services_services_pb.AddBlockRequest;
      reader.readMessage(value,services_services_pb.AddBlockRequest.deserializeBinaryFromReader);
      msg.setAddBlockRequest(value);
      break;
    case 4:
      var value = new proto.gossip.Checkpoint;
      reader.readMessage(value,proto.gossip.Checkpoint.deserializeBinaryFromReader);
      msg.setCheckpoint(value);
      break;
    case 5:
      var value = new proto.gossip.Round;
      reader.readMessage(value,proto.gossip.Round.deserializeBinaryFromReader);
      msg.setRound(value);
      break;
    case 6:
      var value = new proto.gossip.RoundConfirmation;
      reader.readMessage(value,proto.gossip.RoundConfirmation.deserializeBinaryFromReader);
      msg.setRoundConfirmation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Proof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Proof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Proof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Proof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTip_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAddBlockRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      services_services_pb.AddBlockRequest.serializeBinaryToWriter
    );
  }
  f = message.getCheckpoint();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gossip.Checkpoint.serializeBinaryToWriter
    );
  }
  f = message.getRound();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.gossip.Round.serializeBinaryToWriter
    );
  }
  f = message.getRoundConfirmation();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gossip.RoundConfirmation.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes object_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.Proof.prototype.getObjectId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes object_id = 1;
 * This is a type-conversion wrapper around `getObjectId()`
 * @return {string}
 */
proto.gossip.Proof.prototype.getObjectId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getObjectId()));
};


/**
 * optional bytes object_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getObjectId()`
 * @return {!Uint8Array}
 */
proto.gossip.Proof.prototype.getObjectId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getObjectId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.Proof} returns this
 */
proto.gossip.Proof.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes tip = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.Proof.prototype.getTip = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tip = 2;
 * This is a type-conversion wrapper around `getTip()`
 * @return {string}
 */
proto.gossip.Proof.prototype.getTip_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTip()));
};


/**
 * optional bytes tip = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTip()`
 * @return {!Uint8Array}
 */
proto.gossip.Proof.prototype.getTip_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTip()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.Proof} returns this
 */
proto.gossip.Proof.prototype.setTip = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional v2services.AddBlockRequest add_block_request = 3;
 * @return {?proto.v2services.AddBlockRequest}
 */
proto.gossip.Proof.prototype.getAddBlockRequest = function() {
  return /** @type{?proto.v2services.AddBlockRequest} */ (
    jspb.Message.getWrapperField(this, services_services_pb.AddBlockRequest, 3));
};


/**
 * @param {?proto.v2services.AddBlockRequest|undefined} value
 * @return {!proto.gossip.Proof} returns this
*/
proto.gossip.Proof.prototype.setAddBlockRequest = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.Proof} returns this
 */
proto.gossip.Proof.prototype.clearAddBlockRequest = function() {
  return this.setAddBlockRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.Proof.prototype.hasAddBlockRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Checkpoint checkpoint = 4;
 * @return {?proto.gossip.Checkpoint}
 */
proto.gossip.Proof.prototype.getCheckpoint = function() {
  return /** @type{?proto.gossip.Checkpoint} */ (
    jspb.Message.getWrapperField(this, proto.gossip.Checkpoint, 4));
};


/**
 * @param {?proto.gossip.Checkpoint|undefined} value
 * @return {!proto.gossip.Proof} returns this
*/
proto.gossip.Proof.prototype.setCheckpoint = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.Proof} returns this
 */
proto.gossip.Proof.prototype.clearCheckpoint = function() {
  return this.setCheckpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.Proof.prototype.hasCheckpoint = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Round round = 5;
 * @return {?proto.gossip.Round}
 */
proto.gossip.Proof.prototype.getRound = function() {
  return /** @type{?proto.gossip.Round} */ (
    jspb.Message.getWrapperField(this, proto.gossip.Round, 5));
};


/**
 * @param {?proto.gossip.Round|undefined} value
 * @return {!proto.gossip.Proof} returns this
*/
proto.gossip.Proof.prototype.setRound = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.Proof} returns this
 */
proto.gossip.Proof.prototype.clearRound = function() {
  return this.setRound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.Proof.prototype.hasRound = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RoundConfirmation round_confirmation = 6;
 * @return {?proto.gossip.RoundConfirmation}
 */
proto.gossip.Proof.prototype.getRoundConfirmation = function() {
  return /** @type{?proto.gossip.RoundConfirmation} */ (
    jspb.Message.getWrapperField(this, proto.gossip.RoundConfirmation, 6));
};


/**
 * @param {?proto.gossip.RoundConfirmation|undefined} value
 * @return {!proto.gossip.Proof} returns this
*/
proto.gossip.Proof.prototype.setRoundConfirmation = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.Proof} returns this
 */
proto.gossip.Proof.prototype.clearRoundConfirmation = function() {
  return this.setRoundConfirmation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.Proof.prototype.hasRoundConfirmation = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.gossip);
