/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var signatures_signatures_pb = require('../signatures/signatures_pb.js');
goog.object.extend(proto, signatures_signatures_pb);
var transactions_transactions_pb = require('../transactions/transactions_pb.js');
goog.object.extend(proto, transactions_transactions_pb);
goog.exportSymbol('proto.services.Credentials', null, global);
goog.exportSymbol('proto.services.EstablishTokenRequest', null, global);
goog.exportSymbol('proto.services.EstablishTokenResponse', null, global);
goog.exportSymbol('proto.services.ExportChainRequest', null, global);
goog.exportSymbol('proto.services.ExportChainResponse', null, global);
goog.exportSymbol('proto.services.GenerateChainRequest', null, global);
goog.exportSymbol('proto.services.GenerateChainResponse', null, global);
goog.exportSymbol('proto.services.GenerateKeyRequest', null, global);
goog.exportSymbol('proto.services.GenerateKeyResponse', null, global);
goog.exportSymbol('proto.services.GetTipRequest', null, global);
goog.exportSymbol('proto.services.GetTipResponse', null, global);
goog.exportSymbol('proto.services.GetTokenBalanceRequest', null, global);
goog.exportSymbol('proto.services.GetTokenBalanceResponse', null, global);
goog.exportSymbol('proto.services.ImportChainRequest', null, global);
goog.exportSymbol('proto.services.ImportChainResponse', null, global);
goog.exportSymbol('proto.services.ListChainIdsRequest', null, global);
goog.exportSymbol('proto.services.ListChainIdsResponse', null, global);
goog.exportSymbol('proto.services.ListKeysRequest', null, global);
goog.exportSymbol('proto.services.ListKeysResponse', null, global);
goog.exportSymbol('proto.services.MintTokenRequest', null, global);
goog.exportSymbol('proto.services.MintTokenResponse', null, global);
goog.exportSymbol('proto.services.PlayTransactionsRequest', null, global);
goog.exportSymbol('proto.services.PlayTransactionsResponse', null, global);
goog.exportSymbol('proto.services.ReceiveTokenRequest', null, global);
goog.exportSymbol('proto.services.ReceiveTokenResponse', null, global);
goog.exportSymbol('proto.services.RegisterWalletRequest', null, global);
goog.exportSymbol('proto.services.RegisterWalletResponse', null, global);
goog.exportSymbol('proto.services.ResolveAtRequest', null, global);
goog.exportSymbol('proto.services.ResolveRequest', null, global);
goog.exportSymbol('proto.services.ResolveResponse', null, global);
goog.exportSymbol('proto.services.SendTokenRequest', null, global);
goog.exportSymbol('proto.services.SendTokenResponse', null, global);
goog.exportSymbol('proto.services.SerializableChainTree', null, global);
goog.exportSymbol('proto.services.SetDataRequest', null, global);
goog.exportSymbol('proto.services.SetDataResponse', null, global);
goog.exportSymbol('proto.services.SetOwnerRequest', null, global);
goog.exportSymbol('proto.services.SetOwnerResponse', null, global);
goog.exportSymbol('proto.services.StorageAdapterConfig', null, global);
goog.exportSymbol('proto.services.StorageAdapterConfigForBadger', null, global);
goog.exportSymbol('proto.services.StorageAdapterConfigForIpld', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.Credentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.Credentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.Credentials.displayName = 'proto.services.Credentials';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.Credentials.prototype.toObject = function(opt_includeInstance) {
  return proto.services.Credentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.Credentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.Credentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    passPhrase: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.Credentials}
 */
proto.services.Credentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.Credentials;
  return proto.services.Credentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.Credentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.Credentials}
 */
proto.services.Credentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassPhrase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.Credentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.Credentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.Credentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.Credentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassPhrase();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string wallet_name = 1;
 * @return {string}
 */
proto.services.Credentials.prototype.getWalletName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.Credentials.prototype.setWalletName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pass_phrase = 2;
 * @return {string}
 */
proto.services.Credentials.prototype.getPassPhrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.Credentials.prototype.setPassPhrase = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.SerializableChainTree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.SerializableChainTree.repeatedFields_, null);
};
goog.inherits(proto.services.SerializableChainTree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.SerializableChainTree.displayName = 'proto.services.SerializableChainTree';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.SerializableChainTree.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.SerializableChainTree.prototype.toObject = function(opt_includeInstance) {
  return proto.services.SerializableChainTree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.SerializableChainTree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SerializableChainTree.toObject = function(includeInstance, msg) {
  var f, obj = {
    dagList: msg.getDagList_asB64(),
    signaturesMap: (f = msg.getSignaturesMap()) ? f.toObject(includeInstance, proto.signatures.Signature.toObject) : [],
    tip: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.SerializableChainTree}
 */
proto.services.SerializableChainTree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.SerializableChainTree;
  return proto.services.SerializableChainTree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.SerializableChainTree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.SerializableChainTree}
 */
proto.services.SerializableChainTree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addDag(value);
      break;
    case 2:
      var value = msg.getSignaturesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.signatures.Signature.deserializeBinaryFromReader, "");
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.SerializableChainTree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.SerializableChainTree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.SerializableChainTree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SerializableChainTree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDagList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getSignaturesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.signatures.Signature.serializeBinaryToWriter);
  }
  f = message.getTip();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated bytes dag = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.services.SerializableChainTree.prototype.getDagList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes dag = 1;
 * This is a type-conversion wrapper around `getDagList()`
 * @return {!Array<string>}
 */
proto.services.SerializableChainTree.prototype.getDagList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDagList()));
};


/**
 * repeated bytes dag = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDagList()`
 * @return {!Array<!Uint8Array>}
 */
proto.services.SerializableChainTree.prototype.getDagList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDagList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.services.SerializableChainTree.prototype.setDagList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.services.SerializableChainTree.prototype.addDag = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.services.SerializableChainTree.prototype.clearDagList = function() {
  this.setDagList([]);
};


/**
 * map<string, signatures.Signature> signatures = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.signatures.Signature>}
 */
proto.services.SerializableChainTree.prototype.getSignaturesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.signatures.Signature>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.signatures.Signature));
};


proto.services.SerializableChainTree.prototype.clearSignaturesMap = function() {
  this.getSignaturesMap().clear();
};


/**
 * optional string tip = 3;
 * @return {string}
 */
proto.services.SerializableChainTree.prototype.getTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.SerializableChainTree.prototype.setTip = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.RegisterWalletRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.RegisterWalletRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.RegisterWalletRequest.displayName = 'proto.services.RegisterWalletRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.RegisterWalletRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.RegisterWalletRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.RegisterWalletRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.RegisterWalletRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.RegisterWalletRequest}
 */
proto.services.RegisterWalletRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.RegisterWalletRequest;
  return proto.services.RegisterWalletRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.RegisterWalletRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.RegisterWalletRequest}
 */
proto.services.RegisterWalletRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.RegisterWalletRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.RegisterWalletRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.RegisterWalletRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.RegisterWalletRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.RegisterWalletRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.RegisterWalletRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.RegisterWalletRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.RegisterWalletRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.RegisterWalletResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.RegisterWalletResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.RegisterWalletResponse.displayName = 'proto.services.RegisterWalletResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.RegisterWalletResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.RegisterWalletResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.RegisterWalletResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.RegisterWalletResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.RegisterWalletResponse}
 */
proto.services.RegisterWalletResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.RegisterWalletResponse;
  return proto.services.RegisterWalletResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.RegisterWalletResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.RegisterWalletResponse}
 */
proto.services.RegisterWalletResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.RegisterWalletResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.RegisterWalletResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.RegisterWalletResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.RegisterWalletResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string wallet_name = 1;
 * @return {string}
 */
proto.services.RegisterWalletResponse.prototype.getWalletName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.RegisterWalletResponse.prototype.setWalletName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.StorageAdapterConfigForBadger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.StorageAdapterConfigForBadger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.StorageAdapterConfigForBadger.displayName = 'proto.services.StorageAdapterConfigForBadger';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.StorageAdapterConfigForBadger.prototype.toObject = function(opt_includeInstance) {
  return proto.services.StorageAdapterConfigForBadger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.StorageAdapterConfigForBadger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.StorageAdapterConfigForBadger.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.StorageAdapterConfigForBadger}
 */
proto.services.StorageAdapterConfigForBadger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.StorageAdapterConfigForBadger;
  return proto.services.StorageAdapterConfigForBadger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.StorageAdapterConfigForBadger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.StorageAdapterConfigForBadger}
 */
proto.services.StorageAdapterConfigForBadger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.StorageAdapterConfigForBadger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.StorageAdapterConfigForBadger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.StorageAdapterConfigForBadger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.StorageAdapterConfigForBadger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.services.StorageAdapterConfigForBadger.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.StorageAdapterConfigForBadger.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.StorageAdapterConfigForIpld = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.StorageAdapterConfigForIpld, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.StorageAdapterConfigForIpld.displayName = 'proto.services.StorageAdapterConfigForIpld';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.StorageAdapterConfigForIpld.prototype.toObject = function(opt_includeInstance) {
  return proto.services.StorageAdapterConfigForIpld.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.StorageAdapterConfigForIpld} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.StorageAdapterConfigForIpld.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    offline: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.StorageAdapterConfigForIpld}
 */
proto.services.StorageAdapterConfigForIpld.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.StorageAdapterConfigForIpld;
  return proto.services.StorageAdapterConfigForIpld.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.StorageAdapterConfigForIpld} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.StorageAdapterConfigForIpld}
 */
proto.services.StorageAdapterConfigForIpld.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOffline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.StorageAdapterConfigForIpld.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.StorageAdapterConfigForIpld.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.StorageAdapterConfigForIpld} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.StorageAdapterConfigForIpld.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOffline();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.services.StorageAdapterConfigForIpld.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.StorageAdapterConfigForIpld.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.services.StorageAdapterConfigForIpld.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.StorageAdapterConfigForIpld.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool offline = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.services.StorageAdapterConfigForIpld.prototype.getOffline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.services.StorageAdapterConfigForIpld.prototype.setOffline = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.StorageAdapterConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.services.StorageAdapterConfig.oneofGroups_);
};
goog.inherits(proto.services.StorageAdapterConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.StorageAdapterConfig.displayName = 'proto.services.StorageAdapterConfig';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.services.StorageAdapterConfig.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.services.StorageAdapterConfig.AdapterConfigCase = {
  ADAPTER_CONFIG_NOT_SET: 0,
  BADGER: 1,
  IPLD: 2
};

/**
 * @return {proto.services.StorageAdapterConfig.AdapterConfigCase}
 */
proto.services.StorageAdapterConfig.prototype.getAdapterConfigCase = function() {
  return /** @type {proto.services.StorageAdapterConfig.AdapterConfigCase} */(jspb.Message.computeOneofCase(this, proto.services.StorageAdapterConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.StorageAdapterConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.services.StorageAdapterConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.StorageAdapterConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.StorageAdapterConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    badger: (f = msg.getBadger()) && proto.services.StorageAdapterConfigForBadger.toObject(includeInstance, f),
    ipld: (f = msg.getIpld()) && proto.services.StorageAdapterConfigForIpld.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.StorageAdapterConfig}
 */
proto.services.StorageAdapterConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.StorageAdapterConfig;
  return proto.services.StorageAdapterConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.StorageAdapterConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.StorageAdapterConfig}
 */
proto.services.StorageAdapterConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.StorageAdapterConfigForBadger;
      reader.readMessage(value,proto.services.StorageAdapterConfigForBadger.deserializeBinaryFromReader);
      msg.setBadger(value);
      break;
    case 2:
      var value = new proto.services.StorageAdapterConfigForIpld;
      reader.readMessage(value,proto.services.StorageAdapterConfigForIpld.deserializeBinaryFromReader);
      msg.setIpld(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.StorageAdapterConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.StorageAdapterConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.StorageAdapterConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.StorageAdapterConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBadger();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.StorageAdapterConfigForBadger.serializeBinaryToWriter
    );
  }
  f = message.getIpld();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.services.StorageAdapterConfigForIpld.serializeBinaryToWriter
    );
  }
};


/**
 * optional StorageAdapterConfigForBadger badger = 1;
 * @return {?proto.services.StorageAdapterConfigForBadger}
 */
proto.services.StorageAdapterConfig.prototype.getBadger = function() {
  return /** @type{?proto.services.StorageAdapterConfigForBadger} */ (
    jspb.Message.getWrapperField(this, proto.services.StorageAdapterConfigForBadger, 1));
};


/** @param {?proto.services.StorageAdapterConfigForBadger|undefined} value */
proto.services.StorageAdapterConfig.prototype.setBadger = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.services.StorageAdapterConfig.oneofGroups_[0], value);
};


proto.services.StorageAdapterConfig.prototype.clearBadger = function() {
  this.setBadger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.StorageAdapterConfig.prototype.hasBadger = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StorageAdapterConfigForIpld ipld = 2;
 * @return {?proto.services.StorageAdapterConfigForIpld}
 */
proto.services.StorageAdapterConfig.prototype.getIpld = function() {
  return /** @type{?proto.services.StorageAdapterConfigForIpld} */ (
    jspb.Message.getWrapperField(this, proto.services.StorageAdapterConfigForIpld, 2));
};


/** @param {?proto.services.StorageAdapterConfigForIpld|undefined} value */
proto.services.StorageAdapterConfig.prototype.setIpld = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.services.StorageAdapterConfig.oneofGroups_[0], value);
};


proto.services.StorageAdapterConfig.prototype.clearIpld = function() {
  this.setIpld(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.StorageAdapterConfig.prototype.hasIpld = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.GenerateChainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.GenerateChainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.GenerateChainRequest.displayName = 'proto.services.GenerateChainRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.GenerateChainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.GenerateChainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.GenerateChainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GenerateChainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    keyAddr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    storageAdapter: (f = msg.getStorageAdapter()) && proto.services.StorageAdapterConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.GenerateChainRequest}
 */
proto.services.GenerateChainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.GenerateChainRequest;
  return proto.services.GenerateChainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.GenerateChainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.GenerateChainRequest}
 */
proto.services.GenerateChainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyAddr(value);
      break;
    case 3:
      var value = new proto.services.StorageAdapterConfig;
      reader.readMessage(value,proto.services.StorageAdapterConfig.deserializeBinaryFromReader);
      msg.setStorageAdapter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.GenerateChainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.GenerateChainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.GenerateChainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GenerateChainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getKeyAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStorageAdapter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.services.StorageAdapterConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.GenerateChainRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.GenerateChainRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.GenerateChainRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.GenerateChainRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string key_addr = 2;
 * @return {string}
 */
proto.services.GenerateChainRequest.prototype.getKeyAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.GenerateChainRequest.prototype.setKeyAddr = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional StorageAdapterConfig storage_adapter = 3;
 * @return {?proto.services.StorageAdapterConfig}
 */
proto.services.GenerateChainRequest.prototype.getStorageAdapter = function() {
  return /** @type{?proto.services.StorageAdapterConfig} */ (
    jspb.Message.getWrapperField(this, proto.services.StorageAdapterConfig, 3));
};


/** @param {?proto.services.StorageAdapterConfig|undefined} value */
proto.services.GenerateChainRequest.prototype.setStorageAdapter = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.services.GenerateChainRequest.prototype.clearStorageAdapter = function() {
  this.setStorageAdapter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.GenerateChainRequest.prototype.hasStorageAdapter = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.GenerateChainResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.GenerateChainResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.GenerateChainResponse.displayName = 'proto.services.GenerateChainResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.GenerateChainResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.GenerateChainResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.GenerateChainResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GenerateChainResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.GenerateChainResponse}
 */
proto.services.GenerateChainResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.GenerateChainResponse;
  return proto.services.GenerateChainResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.GenerateChainResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.GenerateChainResponse}
 */
proto.services.GenerateChainResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.GenerateChainResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.GenerateChainResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.GenerateChainResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GenerateChainResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.services.GenerateChainResponse.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.GenerateChainResponse.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ExportChainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ExportChainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ExportChainRequest.displayName = 'proto.services.ExportChainRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ExportChainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ExportChainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ExportChainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ExportChainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ExportChainRequest}
 */
proto.services.ExportChainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ExportChainRequest;
  return proto.services.ExportChainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ExportChainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ExportChainRequest}
 */
proto.services.ExportChainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ExportChainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ExportChainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ExportChainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ExportChainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.ExportChainRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.ExportChainRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.ExportChainRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.ExportChainRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.ExportChainRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.ExportChainRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ExportChainResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ExportChainResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ExportChainResponse.displayName = 'proto.services.ExportChainResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ExportChainResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ExportChainResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ExportChainResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ExportChainResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainTree: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ExportChainResponse}
 */
proto.services.ExportChainResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ExportChainResponse;
  return proto.services.ExportChainResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ExportChainResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ExportChainResponse}
 */
proto.services.ExportChainResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainTree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ExportChainResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ExportChainResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ExportChainResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ExportChainResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainTree();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string chain_tree = 1;
 * @return {string}
 */
proto.services.ExportChainResponse.prototype.getChainTree = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.ExportChainResponse.prototype.setChainTree = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ImportChainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ImportChainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ImportChainRequest.displayName = 'proto.services.ImportChainRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ImportChainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ImportChainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ImportChainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ImportChainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainTree: jspb.Message.getFieldWithDefault(msg, 3, ""),
    storageAdapter: (f = msg.getStorageAdapter()) && proto.services.StorageAdapterConfig.toObject(includeInstance, f),
    skipValidation: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ImportChainRequest}
 */
proto.services.ImportChainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ImportChainRequest;
  return proto.services.ImportChainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ImportChainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ImportChainRequest}
 */
proto.services.ImportChainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainTree(value);
      break;
    case 4:
      var value = new proto.services.StorageAdapterConfig;
      reader.readMessage(value,proto.services.StorageAdapterConfig.deserializeBinaryFromReader);
      msg.setStorageAdapter(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkipValidation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ImportChainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ImportChainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ImportChainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ImportChainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainTree();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStorageAdapter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.services.StorageAdapterConfig.serializeBinaryToWriter
    );
  }
  f = message.getSkipValidation();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.ImportChainRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.ImportChainRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.ImportChainRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.ImportChainRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_tree = 3;
 * @return {string}
 */
proto.services.ImportChainRequest.prototype.getChainTree = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.ImportChainRequest.prototype.setChainTree = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional StorageAdapterConfig storage_adapter = 4;
 * @return {?proto.services.StorageAdapterConfig}
 */
proto.services.ImportChainRequest.prototype.getStorageAdapter = function() {
  return /** @type{?proto.services.StorageAdapterConfig} */ (
    jspb.Message.getWrapperField(this, proto.services.StorageAdapterConfig, 4));
};


/** @param {?proto.services.StorageAdapterConfig|undefined} value */
proto.services.ImportChainRequest.prototype.setStorageAdapter = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.services.ImportChainRequest.prototype.clearStorageAdapter = function() {
  this.setStorageAdapter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.ImportChainRequest.prototype.hasStorageAdapter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool skip_validation = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.services.ImportChainRequest.prototype.getSkipValidation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.services.ImportChainRequest.prototype.setSkipValidation = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ImportChainResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ImportChainResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ImportChainResponse.displayName = 'proto.services.ImportChainResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ImportChainResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ImportChainResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ImportChainResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ImportChainResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ImportChainResponse}
 */
proto.services.ImportChainResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ImportChainResponse;
  return proto.services.ImportChainResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ImportChainResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ImportChainResponse}
 */
proto.services.ImportChainResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ImportChainResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ImportChainResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ImportChainResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ImportChainResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.services.ImportChainResponse.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.ImportChainResponse.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.GenerateKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.GenerateKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.GenerateKeyRequest.displayName = 'proto.services.GenerateKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.GenerateKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.GenerateKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.GenerateKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GenerateKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.GenerateKeyRequest}
 */
proto.services.GenerateKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.GenerateKeyRequest;
  return proto.services.GenerateKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.GenerateKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.GenerateKeyRequest}
 */
proto.services.GenerateKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.GenerateKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.GenerateKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.GenerateKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GenerateKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.GenerateKeyRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.GenerateKeyRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.GenerateKeyRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.GenerateKeyRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.GenerateKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.GenerateKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.GenerateKeyResponse.displayName = 'proto.services.GenerateKeyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.GenerateKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.GenerateKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.GenerateKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GenerateKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyAddr: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.GenerateKeyResponse}
 */
proto.services.GenerateKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.GenerateKeyResponse;
  return proto.services.GenerateKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.GenerateKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.GenerateKeyResponse}
 */
proto.services.GenerateKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.GenerateKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.GenerateKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.GenerateKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GenerateKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key_addr = 1;
 * @return {string}
 */
proto.services.GenerateKeyResponse.prototype.getKeyAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.GenerateKeyResponse.prototype.setKeyAddr = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.GetTipRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.GetTipRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.GetTipRequest.displayName = 'proto.services.GetTipRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.GetTipRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.GetTipRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.GetTipRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GetTipRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.GetTipRequest}
 */
proto.services.GetTipRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.GetTipRequest;
  return proto.services.GetTipRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.GetTipRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.GetTipRequest}
 */
proto.services.GetTipRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.GetTipRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.GetTipRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.GetTipRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GetTipRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.GetTipRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.GetTipRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.GetTipRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.GetTipRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.GetTipRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.GetTipRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.GetTipResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.GetTipResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.GetTipResponse.displayName = 'proto.services.GetTipResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.GetTipResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.GetTipResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.GetTipResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GetTipResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.GetTipResponse}
 */
proto.services.GetTipResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.GetTipResponse;
  return proto.services.GetTipResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.GetTipResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.GetTipResponse}
 */
proto.services.GetTipResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.GetTipResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.GetTipResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.GetTipResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GetTipResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tip = 1;
 * @return {string}
 */
proto.services.GetTipResponse.prototype.getTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.GetTipResponse.prototype.setTip = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ListChainIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ListChainIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ListChainIdsRequest.displayName = 'proto.services.ListChainIdsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ListChainIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ListChainIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ListChainIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ListChainIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ListChainIdsRequest}
 */
proto.services.ListChainIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ListChainIdsRequest;
  return proto.services.ListChainIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ListChainIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ListChainIdsRequest}
 */
proto.services.ListChainIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ListChainIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ListChainIdsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ListChainIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ListChainIdsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.ListChainIdsRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.ListChainIdsRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.ListChainIdsRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.ListChainIdsRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ListChainIdsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.ListChainIdsResponse.repeatedFields_, null);
};
goog.inherits(proto.services.ListChainIdsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ListChainIdsResponse.displayName = 'proto.services.ListChainIdsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.ListChainIdsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ListChainIdsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ListChainIdsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ListChainIdsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ListChainIdsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainIdsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ListChainIdsResponse}
 */
proto.services.ListChainIdsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ListChainIdsResponse;
  return proto.services.ListChainIdsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ListChainIdsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ListChainIdsResponse}
 */
proto.services.ListChainIdsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addChainIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ListChainIdsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ListChainIdsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ListChainIdsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ListChainIdsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string chain_ids = 1;
 * @return {!Array<string>}
 */
proto.services.ListChainIdsResponse.prototype.getChainIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.services.ListChainIdsResponse.prototype.setChainIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.services.ListChainIdsResponse.prototype.addChainIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.services.ListChainIdsResponse.prototype.clearChainIdsList = function() {
  this.setChainIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ListKeysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ListKeysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ListKeysRequest.displayName = 'proto.services.ListKeysRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ListKeysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ListKeysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ListKeysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ListKeysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ListKeysRequest}
 */
proto.services.ListKeysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ListKeysRequest;
  return proto.services.ListKeysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ListKeysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ListKeysRequest}
 */
proto.services.ListKeysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ListKeysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ListKeysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ListKeysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ListKeysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.ListKeysRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.ListKeysRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.ListKeysRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.ListKeysRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ListKeysResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.ListKeysResponse.repeatedFields_, null);
};
goog.inherits(proto.services.ListKeysResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ListKeysResponse.displayName = 'proto.services.ListKeysResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.ListKeysResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ListKeysResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ListKeysResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ListKeysResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ListKeysResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyAddrsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ListKeysResponse}
 */
proto.services.ListKeysResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ListKeysResponse;
  return proto.services.ListKeysResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ListKeysResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ListKeysResponse}
 */
proto.services.ListKeysResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeyAddrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ListKeysResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ListKeysResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ListKeysResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ListKeysResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string key_addrs = 1;
 * @return {!Array<string>}
 */
proto.services.ListKeysResponse.prototype.getKeyAddrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.services.ListKeysResponse.prototype.setKeyAddrsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.services.ListKeysResponse.prototype.addKeyAddrs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.services.ListKeysResponse.prototype.clearKeyAddrsList = function() {
  this.setKeyAddrsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.SetOwnerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.SetOwnerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.SetOwnerRequest.displayName = 'proto.services.SetOwnerRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.SetOwnerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.SetOwnerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.SetOwnerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SetOwnerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keyAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    payload: (f = msg.getPayload()) && transactions_transactions_pb.SetOwnershipPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.SetOwnerRequest}
 */
proto.services.SetOwnerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.SetOwnerRequest;
  return proto.services.SetOwnerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.SetOwnerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.SetOwnerRequest}
 */
proto.services.SetOwnerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyAddr(value);
      break;
    case 5:
      var value = new transactions_transactions_pb.SetOwnershipPayload;
      reader.readMessage(value,transactions_transactions_pb.SetOwnershipPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.SetOwnerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.SetOwnerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.SetOwnerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SetOwnerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeyAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      transactions_transactions_pb.SetOwnershipPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.SetOwnerRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.SetOwnerRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.SetOwnerRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.SetOwnerRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.SetOwnerRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.SetOwnerRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key_addr = 3;
 * @return {string}
 */
proto.services.SetOwnerRequest.prototype.getKeyAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.SetOwnerRequest.prototype.setKeyAddr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional transactions.SetOwnershipPayload payload = 5;
 * @return {?proto.transactions.SetOwnershipPayload}
 */
proto.services.SetOwnerRequest.prototype.getPayload = function() {
  return /** @type{?proto.transactions.SetOwnershipPayload} */ (
    jspb.Message.getWrapperField(this, transactions_transactions_pb.SetOwnershipPayload, 5));
};


/** @param {?proto.transactions.SetOwnershipPayload|undefined} value */
proto.services.SetOwnerRequest.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.services.SetOwnerRequest.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.SetOwnerRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.SetOwnerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.SetOwnerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.SetOwnerResponse.displayName = 'proto.services.SetOwnerResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.SetOwnerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.SetOwnerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.SetOwnerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SetOwnerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.SetOwnerResponse}
 */
proto.services.SetOwnerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.SetOwnerResponse;
  return proto.services.SetOwnerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.SetOwnerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.SetOwnerResponse}
 */
proto.services.SetOwnerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.SetOwnerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.SetOwnerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.SetOwnerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SetOwnerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tip = 1;
 * @return {string}
 */
proto.services.SetOwnerResponse.prototype.getTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.SetOwnerResponse.prototype.setTip = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.SetDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.SetDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.SetDataRequest.displayName = 'proto.services.SetDataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.SetDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.SetDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.SetDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SetDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keyAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    payload: (f = msg.getPayload()) && transactions_transactions_pb.SetDataPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.SetDataRequest}
 */
proto.services.SetDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.SetDataRequest;
  return proto.services.SetDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.SetDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.SetDataRequest}
 */
proto.services.SetDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyAddr(value);
      break;
    case 6:
      var value = new transactions_transactions_pb.SetDataPayload;
      reader.readMessage(value,transactions_transactions_pb.SetDataPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.SetDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.SetDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.SetDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SetDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeyAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      transactions_transactions_pb.SetDataPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.SetDataRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.SetDataRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.SetDataRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.SetDataRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.SetDataRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.SetDataRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key_addr = 3;
 * @return {string}
 */
proto.services.SetDataRequest.prototype.getKeyAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.SetDataRequest.prototype.setKeyAddr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional transactions.SetDataPayload payload = 6;
 * @return {?proto.transactions.SetDataPayload}
 */
proto.services.SetDataRequest.prototype.getPayload = function() {
  return /** @type{?proto.transactions.SetDataPayload} */ (
    jspb.Message.getWrapperField(this, transactions_transactions_pb.SetDataPayload, 6));
};


/** @param {?proto.transactions.SetDataPayload|undefined} value */
proto.services.SetDataRequest.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.services.SetDataRequest.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.SetDataRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.SetDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.SetDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.SetDataResponse.displayName = 'proto.services.SetDataResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.SetDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.SetDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.SetDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SetDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.SetDataResponse}
 */
proto.services.SetDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.SetDataResponse;
  return proto.services.SetDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.SetDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.SetDataResponse}
 */
proto.services.SetDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.SetDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.SetDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.SetDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SetDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tip = 1;
 * @return {string}
 */
proto.services.SetDataResponse.prototype.getTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.SetDataResponse.prototype.setTip = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ResolveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ResolveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ResolveRequest.displayName = 'proto.services.ResolveRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ResolveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ResolveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ResolveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ResolveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    path: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ResolveRequest}
 */
proto.services.ResolveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ResolveRequest;
  return proto.services.ResolveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ResolveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ResolveRequest}
 */
proto.services.ResolveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ResolveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ResolveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ResolveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ResolveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.ResolveRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.ResolveRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.ResolveRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.ResolveRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.ResolveRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.ResolveRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.services.ResolveRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.ResolveRequest.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ResolveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ResolveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ResolveResponse.displayName = 'proto.services.ResolveResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ResolveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ResolveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ResolveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ResolveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    remainingPath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ResolveResponse}
 */
proto.services.ResolveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ResolveResponse;
  return proto.services.ResolveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ResolveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ResolveResponse}
 */
proto.services.ResolveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemainingPath(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ResolveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ResolveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ResolveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ResolveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemainingPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string remaining_path = 1;
 * @return {string}
 */
proto.services.ResolveResponse.prototype.getRemainingPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.ResolveResponse.prototype.setRemainingPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.services.ResolveResponse.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.services.ResolveResponse.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.services.ResolveResponse.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.services.ResolveResponse.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ResolveAtRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ResolveAtRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ResolveAtRequest.displayName = 'proto.services.ResolveAtRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ResolveAtRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ResolveAtRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ResolveAtRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ResolveAtRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tip: jspb.Message.getFieldWithDefault(msg, 3, ""),
    path: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ResolveAtRequest}
 */
proto.services.ResolveAtRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ResolveAtRequest;
  return proto.services.ResolveAtRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ResolveAtRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ResolveAtRequest}
 */
proto.services.ResolveAtRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTip(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ResolveAtRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ResolveAtRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ResolveAtRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ResolveAtRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTip();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.ResolveAtRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.ResolveAtRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.ResolveAtRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.ResolveAtRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.ResolveAtRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.ResolveAtRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tip = 3;
 * @return {string}
 */
proto.services.ResolveAtRequest.prototype.getTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.ResolveAtRequest.prototype.setTip = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string path = 4;
 * @return {string}
 */
proto.services.ResolveAtRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.services.ResolveAtRequest.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.EstablishTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.EstablishTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.EstablishTokenRequest.displayName = 'proto.services.EstablishTokenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.EstablishTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.EstablishTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.EstablishTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.EstablishTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keyAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    payload: (f = msg.getPayload()) && transactions_transactions_pb.EstablishTokenPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.EstablishTokenRequest}
 */
proto.services.EstablishTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.EstablishTokenRequest;
  return proto.services.EstablishTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.EstablishTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.EstablishTokenRequest}
 */
proto.services.EstablishTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyAddr(value);
      break;
    case 6:
      var value = new transactions_transactions_pb.EstablishTokenPayload;
      reader.readMessage(value,transactions_transactions_pb.EstablishTokenPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.EstablishTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.EstablishTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.EstablishTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.EstablishTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeyAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      transactions_transactions_pb.EstablishTokenPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.EstablishTokenRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.EstablishTokenRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.EstablishTokenRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.EstablishTokenRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.EstablishTokenRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.EstablishTokenRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key_addr = 3;
 * @return {string}
 */
proto.services.EstablishTokenRequest.prototype.getKeyAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.EstablishTokenRequest.prototype.setKeyAddr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional transactions.EstablishTokenPayload payload = 6;
 * @return {?proto.transactions.EstablishTokenPayload}
 */
proto.services.EstablishTokenRequest.prototype.getPayload = function() {
  return /** @type{?proto.transactions.EstablishTokenPayload} */ (
    jspb.Message.getWrapperField(this, transactions_transactions_pb.EstablishTokenPayload, 6));
};


/** @param {?proto.transactions.EstablishTokenPayload|undefined} value */
proto.services.EstablishTokenRequest.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.services.EstablishTokenRequest.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.EstablishTokenRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.EstablishTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.EstablishTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.EstablishTokenResponse.displayName = 'proto.services.EstablishTokenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.EstablishTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.EstablishTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.EstablishTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.EstablishTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.EstablishTokenResponse}
 */
proto.services.EstablishTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.EstablishTokenResponse;
  return proto.services.EstablishTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.EstablishTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.EstablishTokenResponse}
 */
proto.services.EstablishTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.EstablishTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.EstablishTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.EstablishTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.EstablishTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tip = 1;
 * @return {string}
 */
proto.services.EstablishTokenResponse.prototype.getTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.EstablishTokenResponse.prototype.setTip = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.MintTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.MintTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.MintTokenRequest.displayName = 'proto.services.MintTokenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.MintTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.MintTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.MintTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.MintTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keyAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    payload: (f = msg.getPayload()) && transactions_transactions_pb.MintTokenPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.MintTokenRequest}
 */
proto.services.MintTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.MintTokenRequest;
  return proto.services.MintTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.MintTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.MintTokenRequest}
 */
proto.services.MintTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyAddr(value);
      break;
    case 6:
      var value = new transactions_transactions_pb.MintTokenPayload;
      reader.readMessage(value,transactions_transactions_pb.MintTokenPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.MintTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.MintTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.MintTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.MintTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeyAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      transactions_transactions_pb.MintTokenPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.MintTokenRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.MintTokenRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.MintTokenRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.MintTokenRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.MintTokenRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.MintTokenRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key_addr = 3;
 * @return {string}
 */
proto.services.MintTokenRequest.prototype.getKeyAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.MintTokenRequest.prototype.setKeyAddr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional transactions.MintTokenPayload payload = 6;
 * @return {?proto.transactions.MintTokenPayload}
 */
proto.services.MintTokenRequest.prototype.getPayload = function() {
  return /** @type{?proto.transactions.MintTokenPayload} */ (
    jspb.Message.getWrapperField(this, transactions_transactions_pb.MintTokenPayload, 6));
};


/** @param {?proto.transactions.MintTokenPayload|undefined} value */
proto.services.MintTokenRequest.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.services.MintTokenRequest.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.MintTokenRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.MintTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.MintTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.MintTokenResponse.displayName = 'proto.services.MintTokenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.MintTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.MintTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.MintTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.MintTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.MintTokenResponse}
 */
proto.services.MintTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.MintTokenResponse;
  return proto.services.MintTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.MintTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.MintTokenResponse}
 */
proto.services.MintTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.MintTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.MintTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.MintTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.MintTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tip = 1;
 * @return {string}
 */
proto.services.MintTokenResponse.prototype.getTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.MintTokenResponse.prototype.setTip = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.SendTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.SendTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.SendTokenRequest.displayName = 'proto.services.SendTokenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.SendTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.SendTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.SendTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SendTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keyAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tokenName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    destinationChainId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    payload: (f = msg.getPayload()) && transactions_transactions_pb.SendTokenPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.SendTokenRequest}
 */
proto.services.SendTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.SendTokenRequest;
  return proto.services.SendTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.SendTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.SendTokenRequest}
 */
proto.services.SendTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyAddr(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationChainId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 7:
      var value = new transactions_transactions_pb.SendTokenPayload;
      reader.readMessage(value,transactions_transactions_pb.SendTokenPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.SendTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.SendTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.SendTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SendTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeyAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTokenName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDestinationChainId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      transactions_transactions_pb.SendTokenPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.SendTokenRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.SendTokenRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.SendTokenRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.SendTokenRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.SendTokenRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.SendTokenRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key_addr = 3;
 * @return {string}
 */
proto.services.SendTokenRequest.prototype.getKeyAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.SendTokenRequest.prototype.setKeyAddr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string token_name = 4;
 * @return {string}
 */
proto.services.SendTokenRequest.prototype.getTokenName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.services.SendTokenRequest.prototype.setTokenName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string destination_chain_id = 5;
 * @return {string}
 */
proto.services.SendTokenRequest.prototype.getDestinationChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.services.SendTokenRequest.prototype.setDestinationChainId = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 amount = 6;
 * @return {number}
 */
proto.services.SendTokenRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.services.SendTokenRequest.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional transactions.SendTokenPayload payload = 7;
 * @return {?proto.transactions.SendTokenPayload}
 */
proto.services.SendTokenRequest.prototype.getPayload = function() {
  return /** @type{?proto.transactions.SendTokenPayload} */ (
    jspb.Message.getWrapperField(this, transactions_transactions_pb.SendTokenPayload, 7));
};


/** @param {?proto.transactions.SendTokenPayload|undefined} value */
proto.services.SendTokenRequest.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.services.SendTokenRequest.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.SendTokenRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.SendTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.SendTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.SendTokenResponse.displayName = 'proto.services.SendTokenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.SendTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.SendTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.SendTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SendTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tip: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.SendTokenResponse}
 */
proto.services.SendTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.SendTokenResponse;
  return proto.services.SendTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.SendTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.SendTokenResponse}
 */
proto.services.SendTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.SendTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.SendTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.SendTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.SendTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTip();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string send_token = 1;
 * @return {string}
 */
proto.services.SendTokenResponse.prototype.getSendToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.SendTokenResponse.prototype.setSendToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tip = 2;
 * @return {string}
 */
proto.services.SendTokenResponse.prototype.getTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.SendTokenResponse.prototype.setTip = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ReceiveTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ReceiveTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ReceiveTokenRequest.displayName = 'proto.services.ReceiveTokenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ReceiveTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ReceiveTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ReceiveTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ReceiveTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keyAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tokenPayload: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ReceiveTokenRequest}
 */
proto.services.ReceiveTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ReceiveTokenRequest;
  return proto.services.ReceiveTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ReceiveTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ReceiveTokenRequest}
 */
proto.services.ReceiveTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyAddr(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ReceiveTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ReceiveTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ReceiveTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ReceiveTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeyAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTokenPayload();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.ReceiveTokenRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.ReceiveTokenRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.ReceiveTokenRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.ReceiveTokenRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.ReceiveTokenRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.ReceiveTokenRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key_addr = 3;
 * @return {string}
 */
proto.services.ReceiveTokenRequest.prototype.getKeyAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.ReceiveTokenRequest.prototype.setKeyAddr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string token_payload = 4;
 * @return {string}
 */
proto.services.ReceiveTokenRequest.prototype.getTokenPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.services.ReceiveTokenRequest.prototype.setTokenPayload = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.ReceiveTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.ReceiveTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.ReceiveTokenResponse.displayName = 'proto.services.ReceiveTokenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.ReceiveTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.ReceiveTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.ReceiveTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ReceiveTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.ReceiveTokenResponse}
 */
proto.services.ReceiveTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.ReceiveTokenResponse;
  return proto.services.ReceiveTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.ReceiveTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.ReceiveTokenResponse}
 */
proto.services.ReceiveTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.ReceiveTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.ReceiveTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.ReceiveTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.ReceiveTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tip = 1;
 * @return {string}
 */
proto.services.ReceiveTokenResponse.prototype.getTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.ReceiveTokenResponse.prototype.setTip = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.GetTokenBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.GetTokenBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.GetTokenBalanceRequest.displayName = 'proto.services.GetTokenBalanceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.GetTokenBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.GetTokenBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.GetTokenBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GetTokenBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tokenName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.GetTokenBalanceRequest}
 */
proto.services.GetTokenBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.GetTokenBalanceRequest;
  return proto.services.GetTokenBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.GetTokenBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.GetTokenBalanceRequest}
 */
proto.services.GetTokenBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.GetTokenBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.GetTokenBalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.GetTokenBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GetTokenBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTokenName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.GetTokenBalanceRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.GetTokenBalanceRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.GetTokenBalanceRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.GetTokenBalanceRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.GetTokenBalanceRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.GetTokenBalanceRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string token_name = 3;
 * @return {string}
 */
proto.services.GetTokenBalanceRequest.prototype.getTokenName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.GetTokenBalanceRequest.prototype.setTokenName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.GetTokenBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.GetTokenBalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.GetTokenBalanceResponse.displayName = 'proto.services.GetTokenBalanceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.GetTokenBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.GetTokenBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.GetTokenBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GetTokenBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.GetTokenBalanceResponse}
 */
proto.services.GetTokenBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.GetTokenBalanceResponse;
  return proto.services.GetTokenBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.GetTokenBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.GetTokenBalanceResponse}
 */
proto.services.GetTokenBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.GetTokenBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.GetTokenBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.GetTokenBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.GetTokenBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 amount = 1;
 * @return {number}
 */
proto.services.GetTokenBalanceResponse.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.services.GetTokenBalanceResponse.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.PlayTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.PlayTransactionsRequest.repeatedFields_, null);
};
goog.inherits(proto.services.PlayTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.PlayTransactionsRequest.displayName = 'proto.services.PlayTransactionsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.PlayTransactionsRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.PlayTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.PlayTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.PlayTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.PlayTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    creds: (f = msg.getCreds()) && proto.services.Credentials.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keyAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    transactions_transactions_pb.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.PlayTransactionsRequest}
 */
proto.services.PlayTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.PlayTransactionsRequest;
  return proto.services.PlayTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.PlayTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.PlayTransactionsRequest}
 */
proto.services.PlayTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.Credentials;
      reader.readMessage(value,proto.services.Credentials.deserializeBinaryFromReader);
      msg.setCreds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyAddr(value);
      break;
    case 4:
      var value = new transactions_transactions_pb.Transaction;
      reader.readMessage(value,transactions_transactions_pb.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.PlayTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.PlayTransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.PlayTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.PlayTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.Credentials.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeyAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      transactions_transactions_pb.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional Credentials creds = 1;
 * @return {?proto.services.Credentials}
 */
proto.services.PlayTransactionsRequest.prototype.getCreds = function() {
  return /** @type{?proto.services.Credentials} */ (
    jspb.Message.getWrapperField(this, proto.services.Credentials, 1));
};


/** @param {?proto.services.Credentials|undefined} value */
proto.services.PlayTransactionsRequest.prototype.setCreds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.services.PlayTransactionsRequest.prototype.clearCreds = function() {
  this.setCreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.PlayTransactionsRequest.prototype.hasCreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.services.PlayTransactionsRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.services.PlayTransactionsRequest.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key_addr = 3;
 * @return {string}
 */
proto.services.PlayTransactionsRequest.prototype.getKeyAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.services.PlayTransactionsRequest.prototype.setKeyAddr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated transactions.Transaction transactions = 4;
 * @return {!Array<!proto.transactions.Transaction>}
 */
proto.services.PlayTransactionsRequest.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.transactions.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, transactions_transactions_pb.Transaction, 4));
};


/** @param {!Array<!proto.transactions.Transaction>} value */
proto.services.PlayTransactionsRequest.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.transactions.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.transactions.Transaction}
 */
proto.services.PlayTransactionsRequest.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.transactions.Transaction, opt_index);
};


proto.services.PlayTransactionsRequest.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.PlayTransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.PlayTransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.services.PlayTransactionsResponse.displayName = 'proto.services.PlayTransactionsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.PlayTransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.PlayTransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.PlayTransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.PlayTransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.PlayTransactionsResponse}
 */
proto.services.PlayTransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.PlayTransactionsResponse;
  return proto.services.PlayTransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.PlayTransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.PlayTransactionsResponse}
 */
proto.services.PlayTransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.PlayTransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.PlayTransactionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.PlayTransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.PlayTransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tip = 1;
 * @return {string}
 */
proto.services.PlayTransactionsResponse.prototype.getTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.services.PlayTransactionsResponse.prototype.setTip = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.services);
